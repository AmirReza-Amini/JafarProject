[{"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\index.js":"1","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\registerServiceWorker.js":"2","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\store.js":"3","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\app\\app.js":"4","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\spinner\\spinner.js":"5","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\app\\router.js":"6","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\rootReducer.js":"7","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\routes\\logoutRoutes.js":"8","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\routes\\errorRoutes.js":"9","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\dashboard\\ecommerceDashboard.js":"10","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\routes\\mainRoutes.js":"11","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\maintainance.js":"12","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\error.js":"13","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\index.js":"14","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\customizer\\index.js":"15","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\equipment\\equipmentReducer.js":"16","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\voyage\\voyageReducer.js":"17","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\operator\\operatorReducer.js":"18","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\damage\\damageReducer.js":"19","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\loginPage.jsx":"20","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\routes\\loginRoutes.jsx":"21","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\logoutPage.jsx":"22","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\usersPage.jsx":"23","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\basic-info\\vesselsPage.jsx":"24","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\basic-info\\shippingLinesPage.jsx":"25","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\basic-info\\countriesPage.jsx":"26","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\basic-info\\voyagesPage.jsx":"27","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\billing\\garbage-collection\\garbageCollectionInvoiceList.jsx":"28","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\billing\\garbage-collection\\garbageCollectionBillPage.jsx":"29","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\billing\\vessel-stoppage\\vessel-stoppageBillPage.jsx":"30","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\billing\\garbage-collection\\garbageCollectionTariffPage.jsx":"31","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\billing\\vessel-stoppage\\vessel-stoppageInvoiceList.jsx":"32","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\billing\\vessel-stoppage\\vessel-stoppageTariffPage.jsx":"33","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\billing\\reports\\invoicePrintPage.jsx":"34","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\customizer\\sidebarCollapsed.js":"35","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\customizer\\sidebarSize.js":"36","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\customizer\\sidebarImageUrl.js":"37","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\customizer\\sidebarImage.js":"38","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\customizer\\sidebarBgColor.js":"39","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\todoSearch.js":"40","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\editTodo.js":"41","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\todoVisibilityFilter.js":"42","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\damage\\damageTypes.js":"43","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\operator\\operatorTypes.js":"44","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\voyage\\voyageTypes.js":"45","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\equipment\\equipmentTypes.js":"46","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\authService.js":"47","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\userType.js":"48","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\shippingLineService.js":"49","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\vesselService.js":"50","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\user.js":"51","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\voyageService.js":"52","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\portServices.js":"53","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\permission.js":"54","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\vesselStoppageService.js":"55","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\utility\\tools.js":"56","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\loginLayout.jsx":"57","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\Tree.jsx":"58","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\FormikControl.jsx":"59","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\todoActions.js":"60","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\garbageCollectionService.js":"61","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\httpService.js":"62","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\templateConfig.js":"63","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\countryService.js":"64","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\area.js":"65","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\todoDetails.js":"66","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\todo.js":"67","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\mainLayout.js":"68","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\logoutLayout.js":"69","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\errorLayout.js":"70","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\CustomCheckboxGroup.jsx":"71","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\CustomSwitch.jsx":"72","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\CustomDateTimePicker.jsx":"73","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\CustomButtonGroup.jsx":"74","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\CustomSelect.jsx":"75","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\CheckboxGroup.jsx":"76","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\RadioButtons.jsx":"77","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\Select.jsx":"78","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\Textarea.jsx":"79","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\Input.jsx":"80","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\InputMaskDebounce.jsx":"81","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\todoData.js":"82","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\utility\\context\\toggleContentContext.js":"83","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\components\\footer\\footer.js":"84","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\components\\navbar\\navbar.js":"85","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\components\\sidebar\\sidebar.js":"86","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\TextError.jsx":"87","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\customizer\\customizerActions.js":"88","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\customizer\\customizer.js":"89","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\components\\sidebar\\sidemenu\\sidemenu.js":"90","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\components\\sidebar\\sidebarHeader\\sidebarHeader.js":"91","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\components\\sidebar\\sidemenuHelper.js":"92","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\mockData\\menuList.jsx":"93","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\search\\Search.js":"94"},{"size":955,"mtime":1600634462000,"results":"95","hashOfConfig":"96"},{"size":4702,"mtime":1600634462000,"results":"97","hashOfConfig":"96"},{"size":520,"mtime":1600634462000,"results":"98","hashOfConfig":"96"},{"size":369,"mtime":1600634462000,"results":"99","hashOfConfig":"96"},{"size":422,"mtime":1600634462000,"results":"100","hashOfConfig":"96"},{"size":8007,"mtime":1610184314003,"results":"101","hashOfConfig":"96"},{"size":745,"mtime":1600634462000,"results":"102","hashOfConfig":"96"},{"size":418,"mtime":1600634462000,"results":"103","hashOfConfig":"96"},{"size":400,"mtime":1610184313986,"results":"104","hashOfConfig":"96"},{"size":340,"mtime":1608704041038,"results":"105","hashOfConfig":"96"},{"size":2225,"mtime":1610268183823,"results":"106","hashOfConfig":"96"},{"size":2340,"mtime":1600634462000,"results":"107","hashOfConfig":"96"},{"size":3745,"mtime":1600634462000,"results":"108","hashOfConfig":"96"},{"size":357,"mtime":1600634462000,"results":"109","hashOfConfig":"96"},{"size":501,"mtime":1600634462000,"results":"110","hashOfConfig":"96"},{"size":1033,"mtime":1600634462000,"results":"111","hashOfConfig":"96"},{"size":891,"mtime":1600634462000,"results":"112","hashOfConfig":"96"},{"size":839,"mtime":1600634462000,"results":"113","hashOfConfig":"96"},{"size":691,"mtime":1600634462000,"results":"114","hashOfConfig":"96"},{"size":5794,"mtime":1601967268091,"results":"115","hashOfConfig":"96"},{"size":400,"mtime":1600634462000,"results":"116","hashOfConfig":"96"},{"size":279,"mtime":1600634462000,"results":"117","hashOfConfig":"96"},{"size":26544,"mtime":1608453216521,"results":"118","hashOfConfig":"96"},{"size":26529,"mtime":1608704041058,"results":"119","hashOfConfig":"96"},{"size":24749,"mtime":1602487300890,"results":"120","hashOfConfig":"96"},{"size":3091,"mtime":1602487300888,"results":"121","hashOfConfig":"96"},{"size":34162,"mtime":1608704041060,"results":"122","hashOfConfig":"96"},{"size":5694,"mtime":1610353293444,"results":"123","hashOfConfig":"96"},{"size":9274,"mtime":1610363811513,"results":"124","hashOfConfig":"96"},{"size":8909,"mtime":1610351230025,"results":"125","hashOfConfig":"96"},{"size":6206,"mtime":1601973322438,"results":"126","hashOfConfig":"96"},{"size":5620,"mtime":1610357270215,"results":"127","hashOfConfig":"96"},{"size":6305,"mtime":1602406134007,"results":"128","hashOfConfig":"96"},{"size":6302,"mtime":1610364790200,"results":"129","hashOfConfig":"96"},{"size":235,"mtime":1600634462000,"results":"130","hashOfConfig":"96"},{"size":222,"mtime":1600634462000,"results":"131","hashOfConfig":"96"},{"size":222,"mtime":1600634462000,"results":"132","hashOfConfig":"96"},{"size":209,"mtime":1600634462000,"results":"133","hashOfConfig":"96"},{"size":215,"mtime":1600634462000,"results":"134","hashOfConfig":"96"},{"size":265,"mtime":1600634462000,"results":"135","hashOfConfig":"96"},{"size":265,"mtime":1600634462000,"results":"136","hashOfConfig":"96"},{"size":321,"mtime":1600634462000,"results":"137","hashOfConfig":"96"},{"size":177,"mtime":1600634462000,"results":"138","hashOfConfig":"96"},{"size":189,"mtime":1600634462000,"results":"139","hashOfConfig":"96"},{"size":245,"mtime":1600634462000,"results":"140","hashOfConfig":"96"},{"size":270,"mtime":1600634462000,"results":"141","hashOfConfig":"96"},{"size":1424,"mtime":1602421915470,"results":"142","hashOfConfig":"96"},{"size":236,"mtime":1601967267924,"results":"143","hashOfConfig":"96"},{"size":513,"mtime":1601461441162,"results":"144","hashOfConfig":"96"},{"size":716,"mtime":1600691047316,"results":"145","hashOfConfig":"96"},{"size":527,"mtime":1601967267921,"results":"146","hashOfConfig":"96"},{"size":1013,"mtime":1608704041002,"results":"147","hashOfConfig":"96"},{"size":203,"mtime":1601461441160,"results":"148","hashOfConfig":"96"},{"size":240,"mtime":1608453216470,"results":"149","hashOfConfig":"96"},{"size":664,"mtime":1610348969678,"results":"150","hashOfConfig":"96"},{"size":330,"mtime":1602397973462,"results":"151","hashOfConfig":"96"},{"size":423,"mtime":1600634462000,"results":"152","hashOfConfig":"96"},{"size":2451,"mtime":1608453216517,"results":"153","hashOfConfig":"96"},{"size":1416,"mtime":1601967267644,"results":"154","hashOfConfig":"96"},{"size":1916,"mtime":1600634462000,"results":"155","hashOfConfig":"96"},{"size":666,"mtime":1610275225767,"results":"156","hashOfConfig":"96"},{"size":1871,"mtime":1600634462000,"results":"157","hashOfConfig":"96"},{"size":1301,"mtime":1600634462000,"results":"158","hashOfConfig":"96"},{"size":202,"mtime":1600634462000,"results":"159","hashOfConfig":"96"},{"size":216,"mtime":1600634462000,"results":"160","hashOfConfig":"96"},{"size":207,"mtime":1600634462000,"results":"161","hashOfConfig":"96"},{"size":1471,"mtime":1600634462000,"results":"162","hashOfConfig":"96"},{"size":3121,"mtime":1600634462000,"results":"163","hashOfConfig":"96"},{"size":180,"mtime":1600634462000,"results":"164","hashOfConfig":"96"},{"size":411,"mtime":1600634462000,"results":"165","hashOfConfig":"96"},{"size":1816,"mtime":1601722667187,"results":"166","hashOfConfig":"96"},{"size":1299,"mtime":1608704040991,"results":"167","hashOfConfig":"96"},{"size":5200,"mtime":1608704040985,"results":"168","hashOfConfig":"96"},{"size":4171,"mtime":1600634462000,"results":"169","hashOfConfig":"96"},{"size":1795,"mtime":1601461441151,"results":"170","hashOfConfig":"96"},{"size":1117,"mtime":1600634462000,"results":"171","hashOfConfig":"96"},{"size":1238,"mtime":1600634462000,"results":"172","hashOfConfig":"96"},{"size":871,"mtime":1600634462000,"results":"173","hashOfConfig":"96"},{"size":710,"mtime":1600634462000,"results":"174","hashOfConfig":"96"},{"size":559,"mtime":1600634462000,"results":"175","hashOfConfig":"96"},{"size":3063,"mtime":1601967267660,"results":"176","hashOfConfig":"96"},{"size":19140,"mtime":1600634462000,"results":"177","hashOfConfig":"96"},{"size":839,"mtime":1600634462000,"results":"178","hashOfConfig":"96"},{"size":870,"mtime":1600634462000,"results":"179","hashOfConfig":"96"},{"size":15160,"mtime":1600634462000,"results":"180","hashOfConfig":"96"},{"size":5154,"mtime":1600634462000,"results":"181","hashOfConfig":"96"},{"size":161,"mtime":1600634462000,"results":"182","hashOfConfig":"96"},{"size":407,"mtime":1600634462000,"results":"183","hashOfConfig":"96"},{"size":15463,"mtime":1600634462000,"results":"184","hashOfConfig":"96"},{"size":7377,"mtime":1608453216358,"results":"185","hashOfConfig":"96"},{"size":2507,"mtime":1600634462000,"results":"186","hashOfConfig":"96"},{"size":4327,"mtime":1600634462000,"results":"187","hashOfConfig":"96"},{"size":2702,"mtime":1602421915466,"results":"188","hashOfConfig":"96"},{"size":4629,"mtime":1600634462000,"results":"189","hashOfConfig":"96"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},"1hly8nn",{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"192"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"192"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"192"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"192"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"192"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"192"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"192"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"192"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"192"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"192"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"192"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"192"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"192"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"192"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"192"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"192"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"192"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"192"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"192"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"192"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"192"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"192"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"192"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"192"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"401"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\index.js",[],["404","405"],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\registerServiceWorker.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\store.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\app\\app.js",["406"],"// import external modules\nimport React from \"react\";\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\nimport \"../assets/css/vendors/custom.css\";\nimport 'react-toastify/dist/ReactToastify.css';\n\n// import internal(own) modules\nimport Router from \"./router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst App = props => <Router />\n \n\nexport default App;\n","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\spinner\\spinner.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\app\\router.js",["407"],"// import external modules\r\nimport React, { Component, Suspense, lazy } from \"react\";\r\nimport { BrowserRouter, Switch, Redirect } from \"react-router-dom\";\r\nimport Spinner from \"../components/spinner/spinner\";\r\nimport { connect } from \"react-redux\";\r\n// import internal(own) modules\r\nimport MainLayoutRoutes from \"../layouts/routes/mainRoutes\";\r\nimport LoginLayoutRoute from \"../layouts/routes/loginRoutes\"\r\nimport CleanLayoutRoute from \"../layouts/routes/errorRoutes\";\r\nimport LogoutLayoutRoute from \"../layouts/routes/logoutRoutes\";\r\nimport urls from '../urls.json';\r\nconst LazyVesselsPage = lazy(() => import(\"../views/pages/basic-info/vesselsPage\"));\r\nconst LazyShippingLinesPage = lazy(() => import(\"../views/pages/basic-info/shippingLinesPage\"));\r\nconst LazyVoyagesPage = lazy(() => import(\"../views/pages/basic-info/voyagesPage\"));\r\nconst LazyCountriesPage = lazy(() => import(\"../views/pages/basic-info/countriesPage\"));\r\nconst LazyLoginPage = lazy(() => import(\"../views/pages/loginPage\"));\r\nconst LazyUsersPage = lazy(() => import(\"../views/pages/usersPage\"));\r\nconst LazyLogout = lazy(() => import(\"../views/pages/logoutPage\"));\r\nconst LazyMaintainance = lazy(() => import(\"../views/pages/maintainance\"));\r\nconst LazyGarbageCollectionBill = lazy(() => import(\"../views/pages/billing/garbage-collection/garbageCollectionBillPage\"));\r\nconst LazyGarbageCollectionList = lazy(() => import(\"../views/pages/billing/garbage-collection/garbageCollectionInvoiceList\"));\r\nconst LazyGarbageCollectionTariff = lazy(() => import(\"../views/pages/billing/garbage-collection/garbageCollectionTariffPage\"));\r\nconst LazyVesselStoppageBill = lazy(() => import(\"../views/pages/billing/vessel-stoppage/vessel-stoppageBillPage\"));\r\nconst LazyVesselStoppageTariff = lazy(() => import(\"../views/pages/billing/vessel-stoppage/vessel-stoppageTariffPage\"));\r\nconst LazyVesselStoppageInvoiceList = lazy(() => import(\"../views/pages/billing/vessel-stoppage/vessel-stoppageInvoiceList\"));\r\nconst LazyInvoicePrint = lazy(() => import(\"../views/pages/billing/reports/invoicePrintPage\"));\r\n\r\n// Full Layout\r\nconst LazyHome = lazy(() => import(\"../views/dashboard/ecommerceDashboard\"));\r\n\r\n// Error Pages\r\nconst LazyErrorPage = lazy(() => import(\"../views/pages/error\"));\r\n\r\nclass Router extends Component {\r\n  state = {};\r\n  // componentWillMount() {\r\n  //   const user = auth.getCurrentUser();\r\n\r\n  //   this.setState({ user });\r\n  // }\r\n  render() {\r\n    //console.log('from render')\r\n    return (\r\n      // Set the directory path if you are deplying in sub-folder\r\n      <BrowserRouter basename=\"/\">\r\n        <Switch>\r\n          <MainLayoutRoutes\r\n            exact\r\n            path={urls.Home}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyHome {...matchprops} />\r\n              </Suspense>)}\r\n          />\r\n          <MainLayoutRoutes\r\n            exact\r\n            path={urls.Admin.Users}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyUsersPage {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n          <MainLayoutRoutes\r\n            exact\r\n            path={urls.Admin.Dashboard}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyMaintainance {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n          <LoginLayoutRoute\r\n            exact\r\n            path={urls.Auth.Login}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyLoginPage {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n          <MainLayoutRoutes\r\n            exact\r\n            path={urls.BasicInformation.Vessels}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyVesselsPage {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n          <MainLayoutRoutes\r\n            exact\r\n            path={urls.BasicInformation.ShippingLines}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyShippingLinesPage {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n          <MainLayoutRoutes\r\n            exact\r\n            path={urls.BasicInformation.Voyages}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyVoyagesPage {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n          <MainLayoutRoutes\r\n            exact\r\n            path={urls.BasicInformation.Countries}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyCountriesPage {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n          <MainLayoutRoutes\r\n            exact\r\n            path={urls.Billing.GarbageCollection.Invoice}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyGarbageCollectionBill {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n            <MainLayoutRoutes\r\n            exact\r\n            path={urls.Billing.GarbageCollection.List}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyGarbageCollectionList {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n          <MainLayoutRoutes\r\n            exact\r\n            path={urls.Billing.GarbageCollection.Tariff}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyGarbageCollectionTariff {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n          <MainLayoutRoutes\r\n            exact\r\n            path={urls.Billing.VesselStoppage.Invoice}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyVesselStoppageBill {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n          <MainLayoutRoutes\r\n            exact\r\n            path={urls.Billing.VesselStoppage.Tariff}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyVesselStoppageTariff {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n            <MainLayoutRoutes\r\n            exact\r\n            path={urls.Billing.VesselStoppage.List}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyVesselStoppageInvoiceList {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n                 <CleanLayoutRoute\r\n            exact\r\n            path={urls.Billing.GarbageCollection.Print}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyInvoicePrint {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n          <LogoutLayoutRoute\r\n            exact\r\n            path={urls.Auth.Logout}\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyLogout {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n          <CleanLayoutRoute\r\n            render={(matchprops) => (\r\n              <Suspense fallback={<Spinner />}>\r\n                <LazyErrorPage {...matchprops} />\r\n              </Suspense>\r\n            )}\r\n          />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.user\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    // fetch: () => dispatch(fetchVoyagesTopTenOpen()),\r\n    // fetchOperator:(value)=>dispatch(fetchOperatorInfoBasedOnCode(value))\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Router);\r\n","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\rootReducer.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\routes\\logoutRoutes.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\routes\\errorRoutes.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\dashboard\\ecommerceDashboard.js",["408","409"],"import React, { Component, Fragment } from \"react\";\r\nimport { Slide } from 'react-slideshow-image';\r\nimport 'react-slideshow-image/dist/styles.css'\r\n// Styling\r\n\r\nconst  EcommerceDashboard =()=> {\r\n   \r\n      return (\r\n         <Fragment>\r\n            dfsfsdfs\r\n         </Fragment>\r\n      );\r\n   }\r\n\r\n\r\nexport default EcommerceDashboard;\r\n","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\routes\\mainRoutes.js",["410","411"],"// import external modules\r\nimport React, { useEffect } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport _ from 'lodash'\r\n\r\nimport auth from \"../../services/authService\";\r\nimport config from '../../config.json';\r\nimport MainLayout from \"../mainLayout\";\r\nimport urls from '../../urls.json';\r\n\r\nconst MainLayoutRoute = ({ location, path, render, ...rest }) => {\r\n\r\n   const doesCurrentUserHaveAuthorization = (permissions) => {\r\n\r\n      // console.log('from main route: doesCurrentUserHaveAuthorization', permissions, path);\r\n      if (permissions === null || permissions.length === 0)\r\n         return false;\r\n\r\n      const route = _(path)\r\n         .split(\"/\")\r\n         .value()\r\n         .filter((c) => c !== \"\")\r\n         .map((c) => _.toUpper(c)).join('-');\r\n\r\n      if (route.length === 0) return true;\r\n\r\n      const result = permissions.filter(c => c.name === route && c.isGranted);\r\n      if (result.length === 1) {\r\n         return true;\r\n      }\r\n\r\n      return false;\r\n   }\r\n   const handleRenderMethod = (matchProps) => {\r\n\r\n      if (!config.useAuthentication) {\r\n         return <MainLayout>{render(matchProps)}</MainLayout>\r\n      }\r\n      const user = auth.getCurrentUser();\r\n      if (user) {\r\n         console.log(\"main rout user:\", user);\r\n         if (user.userType === \"Admin\" || user.userType === \"Superuser\") {\r\n            return <MainLayout>{render(matchProps)}</MainLayout>\r\n         }\r\n         else if (doesCurrentUserHaveAuthorization(user.permissions)) {\r\n            return <MainLayout>{render(matchProps)}</MainLayout>\r\n         }\r\n         else {\r\n            auth.logout();\r\n            return (<Redirect\r\n               to={{\r\n                  pathname: \"/login\",\r\n                  state: { message: \"Access to this section is forbidden\" }\r\n               }}\r\n            />)\r\n         }\r\n      }\r\n      return (<Redirect\r\n         to={{\r\n            pathname: \"/login\",\r\n            state: { message: \"Access to this section is forbidden\" }\r\n         }}\r\n      />)\r\n   }\r\n   return (\r\n      <Route\r\n         {...rest}\r\n         path={path}\r\n         render={matchProps => handleRenderMethod(matchProps)}\r\n      />\r\n   );\r\n};\r\n\r\nexport default MainLayoutRoute;\r\n","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\maintainance.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\error.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\index.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\customizer\\index.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\equipment\\equipmentReducer.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\voyage\\voyageReducer.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\operator\\operatorReducer.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\damage\\damageReducer.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\loginPage.jsx",["412","413","414","415","416","417","418"],"import React, { useState } from \"react\";\r\nimport { Card, CardBody, Row, Col, Button } from \"reactstrap\";\r\nimport { LogIn } from \"react-feather\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport _ from \"lodash\";\r\nimport * as auth from \"../../services/authService\"\r\nimport FormikControl from \"../../components/common/formik/FormikControl\";\r\n\r\nimport { getAreas } from \"../../services/area\";\r\nimport ReactRevealText from 'react-reveal-text'\r\n\r\n\r\ntoast.configure({ bodyClassName: \"customFont\" });\r\n\r\n//#region INITIAL VALUES ---------------------------------------------------\r\n\r\nconst initialValues = {\r\n  username: \"\",\r\n  password: \"\",\r\n  selectedArea: \"\"\r\n};\r\n\r\nconst validationSchema = Yup.object({\r\n  username: Yup.string().required(\"Enter Username !\"),\r\n  password: Yup.string().required(\"Enter Password !\")\r\n});\r\n\r\n//#endregion ---------------------------------------------------------------\r\n\r\n//#region SUBMIT FORMIK ----------------------------------------------------\r\n\r\nconst onSubmit = async (values, props) => {\r\n\r\n  let parameters = {\r\n    userName: values.username,\r\n    password: values.password\r\n  };\r\n\r\n  try {\r\n    const { result, message } = await auth.login(_.pick(parameters, [\"userName\", \"password\"]));\r\n    if (!result)\r\n      return toast.error(message);\r\n    else {\r\n      const { state } = props.location;\r\n      console.log(props, state);\r\n      //console.log('ssssssss', props.location.state);\r\n      //window.location = state && state.from ? state.from.pathname : \"/\";\r\n      if (state && state.from)\r\n        return props.history.replace(state && state.from ? state.from.pathname : '/', { ...state.from.state })\r\n      else\r\n        window.location = \"/\";\r\n    }\r\n  } catch (err) {\r\n    if (err.response && err.response.status === 401)\r\n      return toast.error(err.response.data.data[0])\r\n  }\r\n};\r\n//#endregion ---------------------------------------------------------------\r\n\r\nconst LoginPage = (props) => {\r\n\r\n  //#region STATE ------------------------------------------\r\n\r\n  const [state, setState] = useState({\r\n    areaList: []\r\n  });\r\n  const [show, setShow] = useState(false);\r\n  const [disableSubmitButton, setDisableSubmitButton] = useState(false);\r\n\r\n  //#endregion -----------------------------------------------------------\r\n\r\n  //#region INITAL FUNCTIONS ---------------------------------------------\r\n\r\n  useEffect(() => {\r\n    if (props.location.state) {\r\n      const { message } = props.location.state;\r\n      if (props.location.state && message && message.length > 0) {\r\n        toast.error(message);\r\n      }\r\n    }\r\n\r\n    //console.log('from login effevt', props)\r\n\r\n    setTimeout(() => {\r\n      setShow(true);\r\n    }, 1000);\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let errorMessage = \"\";\r\n  }, []);\r\n\r\n  //#endregion -----------------------------------------------------------\r\n\r\n  return (\r\n\r\n\r\n    <div className=\"container\">\r\n      <Row className=\"full-height-vh\">\r\n        <Col\r\n          xs=\"12\"\r\n          className=\"d-flex align-items-center justify-content-center\"\r\n        >\r\n          <Card className=\" text-center width-400 bg-transparency\" >\r\n            <CardBody>\r\n              <h2 className=\"white py-4\">\r\n                <ReactRevealText show={show}>\r\n                  Negin Terminal Operation System\r\n                </ReactRevealText>\r\n              </h2>\r\n              <div className=\"pt-2\">\r\n\r\n                <Formik\r\n                  initialValues={initialValues}\r\n                  validationSchema={validationSchema}\r\n                  onSubmit={async (values) => {\r\n                    //console.log(\"values\", values);\r\n                    await onSubmit(values, props);\r\n                  }}\r\n                  //validateOnBlur={true}\r\n                  validateOnMount={true}\r\n                  enableReinitialize\r\n                >\r\n                  {(formik) => {\r\n                    //console.log(\"Formik props values\", formik);\r\n\r\n                    return (\r\n                      <React.Fragment>\r\n                        <Form>\r\n                          <Row>\r\n                            <Col md=\"12\">\r\n                              <FormikControl\r\n                                control=\"input\"\r\n                                type=\"text\"\r\n                                name=\"username\"\r\n                                id=\"username\"\r\n                                className=\"ltr\"\r\n                                placeholder=\"Username\"\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col md=\"12\">\r\n                              <FormikControl\r\n                                control=\"input\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                name=\"password\"\r\n                                className=\"ltr\"\r\n                                placeholder=\"Password\"\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <div className=\"form-actions center\">\r\n\r\n                            <Button color=\"primary\" type=\"submit\" className=\"mr-1\" disabled={!formik.isValid}>\r\n                              <LogIn size={16} color=\"#FFF\" /> Enter\r\n                            </Button>\r\n\r\n                          </div>\r\n                        </Form>\r\n                      </React.Fragment>\r\n                    );\r\n                  }}\r\n                </Formik>\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n\r\n\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\routes\\loginRoutes.jsx",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\logoutPage.jsx",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\usersPage.jsx",["419","420","421","422","423","424","425","426"],"import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { toast } from 'react-toastify';\r\nimport { User, X, Check, Edit2, Trash2 } from \"react-feather\";\r\nimport { Table, Tag, Space, Checkbox, Switch, Radio } from 'antd';\r\nimport { Card, CardBody, Button, Form, FormGroup, Row, Col, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\n\r\n// const antdClass = require(\"antd/dist/antd.css\");\r\nimport antdClass from 'antd/dist/antd.css';\r\nimport antdClass2 from \"../../assets/css/vendors/customAntdTable.css\";\r\nimport _, { forEach } from 'lodash';\r\n\r\nimport { getUsers, deleteUserInfo, editUserInfo } from '../../services/user';\r\nimport { getPermissions } from '../../services/permission';\r\nimport { getUserTypes } from '../../services/userType';\r\nimport Tree from './Tree';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state\r\n}\r\n\r\n\r\ntoast.configure({ bodyClassName: \"customFont\" });\r\n\r\nclass UsersPage extends Component {\r\n\r\n    //#region VARIABLES ----------------------------------------------------\r\n\r\n    Columns = [\r\n        {\r\n            title: 'First Name',\r\n            dataIndex: 'firstName',\r\n            key: 'firstName',\r\n            sorter: {\r\n                compare: (a, b) => a.firstName.localeCompare(b.firstName),\r\n                multiple: 4\r\n            },\r\n            sortDirections: ['ascend', 'descend'],\r\n            defaultSortOrder: 'ascend',\r\n        },\r\n        {\r\n            title: 'Last Name',\r\n            dataIndex: 'lastName',\r\n            key: 'lastName',\r\n            sorter: {\r\n                compare: (a, b) => a.lastName.localeCompare(b.lastName),\r\n                multiple: 3\r\n            },\r\n            sortDirections: ['ascend', 'descend'],\r\n        },\r\n        {\r\n            title: 'User Name',\r\n            dataIndex: 'userName',\r\n            key: 'userName',\r\n            sorter: {\r\n                compare: (a, b) => a.userName.localeCompare(b.userName),\r\n                multiple: 2\r\n            },\r\n            sortDirections: ['ascend', 'descend'],\r\n        },\r\n        {\r\n            title: 'User Type',\r\n            dataIndex: 'userType',\r\n            key: 'userType',\r\n            render: userType => (\r\n                <Tag color={userType === \"Admin\" ? \"blue\" : \"volcano\"}>{\r\n                    userType\r\n                }</Tag>\r\n            ),\r\n            sorter: {\r\n                compare: (a, b) => a.userType.localeCompare(b.userType),\r\n                multiple: 1\r\n            },\r\n            sortDirections: ['ascend', 'descend'],\r\n        },\r\n        {\r\n            title: 'Is Active',\r\n            dataIndex: 'isActive',\r\n            key: 'isActive',\r\n            render: isActive => (\r\n                <Tag color={isActive ? \"cyan\" : \"red\"}>{\r\n                    isActive ? \"Active\" : \"Inactive\"\r\n                }</Tag>\r\n            )\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button className=\"btn-warning mt-1\" size=\"sm\" onClick={() => this.handleEditUser(record)}>\r\n                        <Edit2 size={16} />\r\n                    </Button>\r\n                    <Button className=\"btn-danger mt-1\" size=\"sm\" onClick={() => this.handleDeleteUser(record)}>\r\n                        <Trash2 size={16} />\r\n                    </Button>\r\n                    {/* <a onClick={() => this.handleDeleteUser(record)}>Delete <Edit2 size={16} /></a> */}\r\n                </Space>\r\n            ),\r\n        }\r\n    ];\r\n\r\n    UserStatus = [\"Active\", \"Inactive\"];\r\n\r\n    //#endregion -----------------------------------------------------------\r\n\r\n    //#region INITIAL FUNCTIONS -----------------------------------------\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { ListOfUserTypes: [], ListOfPermissions: [], ListOfUsers: [], ListOfUsersForTable: [], selectedRowKeys: [], editModal: false, deleteModal: false, currentRow: {} };\r\n    }\r\n\r\n    createDataModelForDataTabel(data) {\r\n        return data.map(item => {\r\n            return { ...item, key: item._id }\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        getUsers().then(res => {\r\n            console.log('resss', res)\r\n            if (res.data.result) {\r\n                this.setState({ ListOfUsers: res.data.data, ListOfUsersForTable: this.createDataModelForDataTabel(res.data.data) })\r\n            }\r\n        });\r\n        getPermissions().then(res => {\r\n            if (res.data.result) {\r\n                this.setState({ ListOfPermissions: res.data.data });\r\n            }\r\n        });\r\n        getUserTypes().then(res => {\r\n            if (res.data.result) {\r\n                this.setState({ ListOfUserTypes: res.data.data });\r\n            }\r\n        })\r\n    }\r\n\r\n    //#endregion -----------------------------------------------------------\r\n\r\n    //#region EDIT USER INFO EVENTS ----------------------------------------\r\n\r\n    handleEditUser = (userData) => {\r\n\r\n        console.log('userData for edit', userData);\r\n\r\n        // Use Spread Operator ------------------------------------\r\n        // به این علت که دیپ کلون نکردیم برای اینکه تغییری بدیم که اثرش توی لیست اصلی اعمال نشه\r\n        // مجبوریم از این روش استفاده کنیم که مدام باید برای هر آبجکتی که تو در تو هست\r\n        // const userInfo = { ..._(this.state.ListOfUsers).filter(c => c._id === userData._id).first() };\r\n        // از ... استفاده کنیم\r\n        // userInfo.userId = \"123456\";\r\n        // const permissions = [..._(this.state.ListOfUsers).filter(c => c._id == userData._id).first().permissions];\r\n        // permissions[0] = { ...permissions[0] };\r\n        // permissions[0].name = \"XXXX\";\r\n        // userInfo.permissions = permissions;\r\n        // Use Deep Clone -----------------------------------------\r\n        // در این صورت دیگه نیازی نیست که نگران باشیم رفرنس تغییر کرده یا نه\r\n        const userInfo = _.cloneDeep(_(this.state.ListOfUsers).filter(c => c._id === userData._id).first());\r\n        //userInfo.permissions[0].name = \"xxxx\";\r\n        let permissions = this.extractUserPermissions(userInfo);\r\n\r\n        this.setState({ currentRow: { ...userInfo, permissions: permissions } });\r\n        this.editToggle();\r\n    }\r\n\r\n    extractUserPermissions(userInfo) {\r\n        let permissions = _.cloneDeep(this.state.ListOfPermissions);\r\n\r\n        //console.log('list of permi', permissions);\r\n        let traversNodes = (childPermissions, pp) => {\r\n            //console.log('xxxx',childPermissions,pp)\r\n            childPermissions.map(item => {\r\n                //console.log('node',item.key,pp.name)\r\n                if (item.key === pp.name) {\r\n                    // console.log('crossnode',item.key,pp.name)\r\n                    if (pp.isGranted) {\r\n                        item.isGranted = true;\r\n                    }\r\n                    else {\r\n                        item.isGranted = false;\r\n                    }\r\n                }\r\n                else if (item.child && item.child.length > 0) {\r\n                    //console.log('traversnode',item.key,pp.name)\r\n                    traversNodes(item.child, pp)\r\n                }\r\n            })\r\n\r\n        }\r\n\r\n        for (let i = 0; i < userInfo.permissions.length; i++) {\r\n            for (let j = 0; j < permissions.length; j++) {\r\n                if (permissions[j].key === userInfo.permissions[i].name) {\r\n                    //console.log('cross',i,j)\r\n                    if (userInfo.permissions[i].isGranted) {\r\n                        permissions[j].isGranted = true;\r\n                        break;\r\n                    }\r\n                }\r\n                else if (permissions[j].child != null && permissions[j].child.length > 0) {\r\n                    //console.log('traverse', i,userInfo.permissions[i], j,permissions[j]);\r\n                    traversNodes(permissions[j].child, userInfo.permissions[i]);\r\n                }\r\n            }\r\n        }\r\n        console.log('user permission extract', permissions);\r\n        return permissions;\r\n    }\r\n\r\n    editToggle = () => {\r\n        this.setState({\r\n            editModal: !this.state.editModal\r\n        });\r\n    }\r\n\r\n    handleUserPermissionsChange(checkedValues, permissionName) {\r\n        console.log('checked = ', checkedValues);\r\n        const currentRow = { ...this.state.currentRow };\r\n\r\n        const permissions = [...currentRow.permissions];\r\n        const indexOfP = _(permissions).findIndex(c => c.name === permissionName);\r\n        permissions[indexOfP] = { ...permissions[indexOfP] };\r\n\r\n        const permission = { ...permissions[indexOfP] };\r\n        const access = [...permission.access];\r\n\r\n        access.map((item, index) => {\r\n            if (checkedValues.length === 0) {\r\n                access[index] = { ...access[index] };\r\n                access[index].value = false;\r\n            }\r\n\r\n            else {\r\n                const existItemInSelectedValues = _(checkedValues).filter(c => c === item.key).first();\r\n\r\n                if (existItemInSelectedValues) {\r\n                    //console.log(existItemInSelectedValues)\r\n                    access[index] = { ...access[index] };\r\n                    access[index].value = true;\r\n                }\r\n                else {\r\n                    access[index] = { ...access[index] };\r\n                    access[index].value = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        permission.access = access;\r\n        permissions[indexOfP] = permission;\r\n        currentRow.permissions = permissions;\r\n        this.setState({ currentRow: currentRow });\r\n    }\r\n\r\n    handleUserPermissionGrantedChange = (switchValue, key) => {\r\n        const currentRow = { ...this.state.currentRow };\r\n        const permissions = [...currentRow.permissions];\r\n        // const indexOfP = _(permissions).findIndex(c => c.name === permissionName);\r\n        // permissions[indexOfP] = { ...permissions[indexOfP] };\r\n        // permissions[indexOfP].isGranted = switchValue;\r\n        // currentRow.permissions = permissions;\r\n        // this.setState({ currentRow: currentRow })\r\n        //console.log(switchValue);\r\n        const temp = this.updateTreePermissionsWithKey(switchValue, key, permissions);\r\n        currentRow.permissions = temp;\r\n        console.log(temp)\r\n        this.setState({ currentRow })\r\n    }\r\n\r\n    updateTreePermissionsWithKey = (switchValue, key, permissions) => {\r\n\r\n        let travvv = (switchValue, key, childPermissions) => {\r\n            childPermissions.map(item => {\r\n                if (item.key === key) {\r\n                    item.isGranted = switchValue;\r\n                }\r\n                else if (item.child && item.child.length > 0) {\r\n\r\n                    travvv(switchValue, key, item.child);\r\n                }\r\n            });\r\n        }\r\n\r\n        permissions.map(item => {\r\n            if (item.key === key) {\r\n                item.isGranted = switchValue;\r\n            }\r\n            else if (item.child && item.child.length > 0) {\r\n\r\n                travvv(switchValue, key, item.child);\r\n            }\r\n        });\r\n        return permissions;\r\n    }\r\n\r\n    handleUserTypeChange = ({ value }) => {\r\n        //console.log('handleUserTypeChange', value);\r\n        const currentRow = { ...this.state.currentRow };\r\n        currentRow.userType = value;\r\n        this.setState({ currentRow })\r\n    }\r\n\r\n    handleUserStatusChange = ({ value }) => {\r\n        //console.log('handleUserStatusChange', value);\r\n        const currentRow = { ...this.state.currentRow };\r\n        currentRow.isActive = value === \"Active\" ? true : false;\r\n        this.setState({ currentRow })\r\n    }\r\n\r\n    handleCancelEditUserInfo = () => {\r\n        this.setState({ currentRow: {} });\r\n        this.editToggle();\r\n    }\r\n\r\n    convertUserTreePermissionsToLinerPermissions = (permissions, tempList) => {\r\n        if (!permissions || !permissions.length) {\r\n            return tempList;\r\n        }\r\n        else {\r\n            permissions.map(item => {\r\n                tempList.push({ name: item.key, isGranted: item.isGranted });\r\n                this.convertUserTreePermissionsToLinerPermissions(item.child, tempList);\r\n            });\r\n            return tempList;\r\n        }\r\n    }\r\n\r\n    handleSubmitEditUserInfo = () => {\r\n        console.log('submit edit user info', this.state.currentRow);\r\n        const userData = _.cloneDeep(this.state.currentRow);\r\n        const temp = [];\r\n        const userPermissions = this.convertUserTreePermissionsToLinerPermissions(userData.permissions, temp);\r\n        userData.permissions = userPermissions;\r\n        console.log(userPermissions);\r\n        delete userData.password;\r\n        console.log('delete password from user data edit', userData);\r\n        editUserInfo(userData).then(response => {\r\n            if (response.data.result) {\r\n                toast.success('User info has been updated successfully');\r\n                const users = [...this.state.ListOfUsers];\r\n                const index = _(users).findIndex(c => c._id === this.state.currentRow._id);\r\n                users[index] = { ...users[index] };\r\n                users[index] = userData;\r\n\r\n                this.setState({ ListOfUsers: users, ListOfUsersForTable: this.createDataModelForDataTabel(users), currentRow: {} });\r\n                this.editToggle();\r\n            }\r\n            else {\r\n                toast.success('There is an error in editing user info');\r\n                this.setState({ currentRow: {} });\r\n                this.editToggle();\r\n            }\r\n        }).catch(error => {\r\n            this.editToggle();\r\n            this.setState({ currentRow: {} });\r\n            //return toast.error(error.message);\r\n\r\n        })\r\n    }\r\n\r\n    //#endregion -----------------------------------------------------------------------------------------\r\n\r\n    //#region DELETE USER INFO EVENTS ---------------------------------------\r\n\r\n    handleDeleteUser = (userData) => {\r\n        //console.log('userData for delete', userData);\r\n        const userInfo = { ..._(this.state.ListOfUsers).filter(c => c._id === userData._id).first() };\r\n        this.setState({ currentRow: userInfo })\r\n        this.deleteToggle();\r\n    }\r\n\r\n    deleteToggle = () => {\r\n        this.setState({\r\n            deleteModal: !this.state.deleteModal\r\n        });\r\n    }\r\n\r\n    handleCancelDeleteUserInfo = () => {\r\n        this.setState({ currentRow: {} });\r\n        this.deleteToggle();\r\n    }\r\n\r\n    handleSubmitDeleteUserInfo = () => {\r\n        deleteUserInfo(this.state.currentRow._id).then(response => {\r\n            if (response.data.result) {\r\n                toast.success('User info has been delete successfully');\r\n                const originalUsers = [...this.state.ListOfUsers];\r\n                const users = originalUsers.filter(c => c._id !== this.state.currentRow._id);\r\n                this.setState({ ListOfUsers: users, ListOfUsersForTable: this.createDataModelForDataTabel(users), currentRow: {} });\r\n                this.deleteToggle();\r\n            }\r\n            else {\r\n                toast.success('There is an error in deleting user info');\r\n                this.setState({ currentRow: {} });\r\n                this.deleteToggle();\r\n            }\r\n        }).catch(error => {\r\n            this.deleteToggle();\r\n            this.setState({ currentRow: {} });\r\n            //return toast.error(error.message);\r\n\r\n        })\r\n    }\r\n    //#endregion -----------------------------------------------------------------------------------------\r\n\r\n    //#region GRID SELECTION EVENT ------------------------------------------\r\n\r\n    onSelectChange = selectedRowKeys => {\r\n        //console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n        this.setState({ selectedRowKeys });\r\n    };\r\n\r\n    //#endregion ------------------------------------------------------------\r\n\r\n    showMenuPermissions = (permissions) => {\r\n        return permissions.map(item => {\r\n            if (!item.child || item.child.length == 0) {\r\n                return (\r\n                    <Col md=\"12\" key={item.key} className=\"mb-1\">\r\n                        <Row>\r\n                            <Col md=\"6\">\r\n                                <Tag color=\"magenta\">{item.name}</Tag>\r\n                            </Col>\r\n                            <Col md=\"6\" style={{ justifyContent: \"right\", direction: \"ltr\", display: \"flex\" }} >\r\n                                {/* <span className=\"ml-1 pb-90\">{permission.isGranted ? 'Granted' : 'Not Granted'}</span> */}\r\n                                <Switch\r\n                                    name={item.key}\r\n                                    size=\"default\"\r\n                                    // disabled={item.level !=0 && disabledParent}\r\n                                    //disabled={disabled}\r\n                                    defaultChecked={item.isGranted}\r\n                                    checkedChildren={item.isGranted ? `Granted` : \"\"}\r\n                                    unCheckedChildren={!item.isGranted ? `Not Granted` : \"\"}\r\n                                    onChange={(value) => this.handleUserPermissionGrantedChange(value, item.key)}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                )\r\n            }\r\n            else {\r\n                return (\r\n                    <Col md=\"12\" key={item.key} className=\"mb-1\">\r\n                        <Row>\r\n                            <Col md=\"6\">\r\n                                <Tag color=\"magenta\">{item.name}</Tag>\r\n                            </Col>\r\n                            <Col md=\"6\" style={{ justifyContent: \"right\", direction: \"rtl\", display: \"flex\" }} >\r\n                                {/* <span className=\"ml-1 pb-90\">{permission.isGranted ? 'Granted' : 'Not Granted'}</span> */}\r\n                                <Switch\r\n                                    name={item.key}\r\n                                    size=\"default\"\r\n                                    //disabled={disabledParent}\r\n                                    //disabled={disabled}\r\n                                    defaultChecked={item.isGranted}\r\n                                    checkedChildren={item.isGranted ? `Granted` : \"\"}\r\n                                    unCheckedChildren={!item.isGranted ? `Not Granted` : \"\"}\r\n                                    onChange={(value) => this.handleUserPermissionGrantedChange(value, item.key)}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md=\"12\" className=\"ml-1 mt-1\">\r\n                                {this.showMenuPermissions(item.child)}\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { selectedRowKeys } = this.state.selectedRowKeys;\r\n        console.log('render state', this.state);\r\n        const rowSelection = {\r\n            selectedRowKeys,\r\n            onChange: this.onSelectChange,\r\n            selections: [\r\n                Table.SELECTION_ALL\r\n            ],\r\n        };\r\n        return (\r\n            <React.Fragment>\r\n                {/* <h4 className=\"mt-4 mb-0 text-bold-400\">Users</h4>\r\n                <p>\r\n                    Constrain the width of cards via custom CSS, our predefined grid classes, or with custom styles using our grid\r\n                    mixins.\r\n            </p> */}\r\n\r\n                <Row className=\"row-eq-height\">\r\n                    <Col sm=\"12\" md=\"12\">\r\n                        <Card>\r\n                            <CardBody>\r\n                                {/* <CardTitle>Users</CardTitle> */}\r\n                                {/* <CardText>With supporting text below as a natural lead-in to additional content.</CardText> */}\r\n                                <Form>\r\n                                    <div className=\"form-body\">\r\n                                        <h4 className=\"form-section\">\r\n                                            <User size={20} color=\"#212529\" /> Users\r\n                                        </h4>\r\n                                        <Row>\r\n                                            <Col md=\"12\">\r\n                                                <FormGroup>\r\n                                                    {/* <Input type=\"text\" id=\"projectinput1\" name=\"fname\" placeholder=\"First Name\" /> */}\r\n                                                    <Table\r\n                                                        rowSelection={rowSelection}\r\n                                                        className={antdClass + antdClass2}\r\n                                                        columns={this.Columns}\r\n                                                        dataSource={this.state.ListOfUsersForTable}\r\n                                                        pagination={{ position: [\"bottomCenter\"] }}\r\n                                                        scroll={{ x: 'max-content', y: 200 }}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            {/* <Col md=\"6\">\r\n                                                <FormGroup>\r\n                                                    <Input type=\"text\" id=\"projectinput2\" name=\"lname\" placeholder=\"Last Name\" />\r\n                                                </FormGroup>\r\n                                            </Col> */}\r\n                                        </Row>\r\n\r\n                                    </div>\r\n\r\n                                    <div className=\"form-actions text-left\">\r\n                                        <Button color=\"success\" className=\"mr-1\">\r\n                                            <Check size={20} color=\"#FFF\" /> Save\r\n                                        </Button>\r\n                                        <Button color=\"warning\" >\r\n                                            <X size={20} color=\"#FFF\" /> Cancel\r\n                                        </Button>\r\n\r\n                                    </div>\r\n                                </Form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Modal\r\n                    isOpen={this.state.editModal}\r\n                    toggle={this.editToggle}\r\n                    className={this.props.className}\r\n                    backdrop=\"static\"\r\n                >\r\n                    <ModalHeader toggle={this.editToggle}>Edit User Permissions</ModalHeader>\r\n                    <ModalBody>\r\n                        <Row>\r\n                            {\r\n                                this.state.currentRow && this.state.currentRow.permissions &&\r\n                                //this.showMenuPermissions(this.state.currentRow.permissions)\r\n                                <Tree items={this.state.currentRow.permissions}\r\n                                    onChangeTree={this.handleUserPermissionGrantedChange}\r\n                                    disabled={false}\r\n                                />\r\n                            }\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md=\"12\">\r\n                                <Tag color=\"magenta\">User Type</Tag>\r\n                                {this.state.ListOfUserTypes &&\r\n                                    <Radio.Group\r\n                                        options={this.state.ListOfUserTypes.map(c => c.name)}\r\n                                        value={this.state.currentRow.userType}\r\n                                        onChange={(e) => this.handleUserTypeChange(e.target)}\r\n                                    />\r\n                                }\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md=\"12\" className=\"mt-1\">\r\n                                <Tag color=\"magenta\">User Status</Tag>\r\n                                {this.UserStatus &&\r\n                                    <Radio.Group\r\n                                        options={this.UserStatus}\r\n                                        value={this.state.currentRow.isActive ? \"Active\" : \"Inactive\"}\r\n                                        onChange={(e) => this.handleUserStatusChange(e.target)}\r\n                                    />\r\n                                }\r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" onClick={this.handleSubmitEditUserInfo}>\r\n                            Save\r\n                        </Button>{\" \"}\r\n                        <Button color=\"secondary\" onClick={this.handleCancelEditUserInfo}>\r\n                            Cancel\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n\r\n                <Modal\r\n                    isOpen={this.state.deleteModal}\r\n                    toggle={this.deleteToggle}\r\n                    className={this.props.className}\r\n                    backdrop=\"static\"\r\n                >\r\n                    <ModalHeader toggle={this.deleteToggle}>Delete User Info</ModalHeader>\r\n                    <ModalBody>\r\n                        Are you sure you want to delete {this.state.currentRow.firstName + ' ' + this.state.currentRow.lastName + '\\'s info'} ?\r\n               </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" onClick={this.handleSubmitDeleteUserInfo}>\r\n                            Save\r\n                        </Button>{\" \"}\r\n                        <Button color=\"secondary\" onClick={this.handleCancelDeleteUserInfo}>\r\n                            Cancel\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(UsersPage);","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\basic-info\\vesselsPage.jsx",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\basic-info\\shippingLinesPage.jsx",["427","428","429"],"import React, { useState, useEffect } from \"react\";\r\nimport { Card, CardBody, Button, FormGroup, Row, Col, Modal, ModalHeader, ModalBody } from \"reactstrap\";\r\nimport { Table, Tag, Space } from 'antd';\r\nimport { Formik, Form } from \"formik\";\r\nimport { ShoppingBag, Edit2, CheckSquare, X } from \"react-feather\";\r\nimport * as Yup from \"yup\";\r\nimport { toast } from \"react-toastify\";\r\nimport _ from \"lodash\";\r\nimport FormikControl from \"../../../components/common/formik/FormikControl\";\r\nimport antdClass from 'antd/dist/antd.css';\r\nimport antdClass2 from \"../../../assets/css/vendors/customAntdTable.css\"\r\n\r\n\r\nimport {\r\n    getShippingLines,\r\n    addNewshippingLineInfo,\r\n    editShippingLineInfo\r\n} from \"../../../services/shippingLineService\";\r\n\r\nimport { getCountries } from \"../../../services/countryService\"\r\ntoast.configure({ bodyClassName: \"customFont\" });\r\n//#region INITIAL VALUES ---------------------------------------------------\r\n\r\nconst initialValues = {\r\n    shippingLineName: \"\",\r\n    economicCode: \"\",\r\n    tel: \"\",\r\n    email: \"\",\r\n    address: \"\",\r\n    nationalCode: \"\"\r\n};\r\n\r\nconst validationSchema = Yup.object({\r\n    shippingLineName: Yup.string().required(\"Entet Shipping Line Name!\"),\r\n    economicCode: Yup.string().required(\"Enter Economic Code!\"),\r\n\r\n});\r\nconst ShippingLinesPage = (props) => {\r\n    const onSubmitEditShippingLine = (values, props) => {\r\n        if (values === state.currentRow) return;\r\n        let parameters = {\r\n            shippingLineId: values.id,\r\n            shippingLineName: values.shippingLineName,\r\n            economicCode: values.economicCode,\r\n            tel: values.tel,\r\n            email: values.email,\r\n            address: values.address,\r\n            nationalCode: values.nationalCode\r\n        };\r\n        editShippingLineInfo(parameters).then(response => {\r\n            console.log('response', response);\r\n            if (response.data.result) {\r\n                toast.success(response.data.data[0]);\r\n                const lstShippingLines = [...state.ListOfShippingLines];\r\n                const index = _(lstShippingLines).findIndex(c => c.shippingLineId === values.id)\r\n                lstShippingLines[index] = { ...lstShippingLines[index] };\r\n                lstShippingLines[index].key = values.id;\r\n                lstShippingLines[index].shippingLineId = values.id;\r\n                lstShippingLines[index].shippingLineName = values.shippingLineName;\r\n                lstShippingLines[index].economicCode = values.economicCode;\r\n                lstShippingLines[index].tel = values.tel;\r\n                lstShippingLines[index].email = values.email;\r\n                lstShippingLines[index].address = values.address;\r\n                lstShippingLines[index].nationalCode = values.nationalCode;\r\n                console.log('from submuit', lstShippingLines[index])\r\n\r\n                setState(prevState => ({ ...prevState, ListOfShippingLines: lstShippingLines, currentRow: {} }));\r\n                editToggle();\r\n            }\r\n            else {\r\n                toast.error(response.data.data[0])\r\n            }\r\n        }).catch(error => { })\r\n    }\r\n    const onSubmitCreateShippingLine = (values, props) => {\r\n        console.log('values', values);\r\n        let parameters = {\r\n            shippingLineName: values.shippingLineName,\r\n            economicCode: values.economicCode,\r\n            tel: values.tel,\r\n            email: values.email,\r\n            address: values.address,\r\n            nationalCode: values.nationalCode\r\n        }\r\n        addNewshippingLineInfo(parameters).then(response => {\r\n            console.log('response', response);\r\n            if (response.data.result) {\r\n                toast.success(response.data.data[0]);\r\n                const lstShippingLines = [...state.ListOfShippingLines];\r\n                getShippingLines().then(res => {\r\n                    if (res.data.result) {\r\n                        console.log('shippingLines', res);\r\n                        const tempList = res.data.data.map(item => {\r\n                            return {\r\n                                key: item.ShippingLineId,\r\n                                shippingLineId: item.ShippingLineId,\r\n                                shippingLineName: item.ShippingLineName,\r\n                                economicCode: item.EconomicCode,\r\n                                tel: item.Tel,\r\n                                address: item.Address,\r\n                                email: item.Email,\r\n                                nationalCode: item.NationalCode\r\n                            }\r\n                        })\r\n                        setState(prevState => ({ ...prevState, ListOfShippingLines: tempList }))\r\n                    }\r\n                    else {\r\n                        return toast.error(res.data.data[0]);\r\n                    }\r\n                }).catch(err => { });\r\n\r\n                createToggle();\r\n            }\r\n            else {\r\n                toast.error(response.data.data[0])\r\n            }\r\n        }).catch(error => { })\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'shippingLineName',\r\n            key: 'shippingLineName',\r\n            sorter: {\r\n                compare: (a, b) => a.shippingLineName.localeCompare(b.shippingLineName),\r\n                multiple: 4\r\n            },\r\n            sortDirections: ['ascend', 'descend'],\r\n            defaultSortOrder: 'ascend',\r\n        },\r\n        {\r\n            title: 'Economic Code',\r\n            dataIndex: 'economicCode',\r\n            key: 'economicCode'\r\n        },\r\n        {\r\n            title: 'Tel',\r\n            dataIndex: 'tel',\r\n            key: 'tel'\r\n        },\r\n        {\r\n            title: 'Address',\r\n            dataIndex: 'address',\r\n            key: 'address'\r\n        },\r\n        {\r\n            title: 'Email',\r\n            dataIndex: 'email',\r\n            key: 'email'\r\n        },\r\n        {\r\n            title: 'NationalCode',\r\n            dataIndex: 'nationalCode',\r\n            key: 'nationalCode'\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button className=\"btn-warning mt-1\" size=\"sm\" onClick={() => handleEditShippingLine(record)}>\r\n                        <Edit2 size={16} />\r\n                    </Button>\r\n                </Space>\r\n            ),\r\n        }\r\n\r\n    ];\r\n\r\n    const [state, setState] = useState({\r\n\r\n        ListOfShippingLines: [],\r\n        editModal: false,\r\n        createModal: false,\r\n        currentRow: {}\r\n    });\r\n\r\n    useEffect(() => {\r\n        getShippingLines().then(res => {\r\n            if (res.data.result) {\r\n                console.log('shippingLines', res);\r\n                const tempList = res.data.data.map(item => {\r\n                    return {\r\n                        key: item.ShippingLineId,\r\n                        shippingLineId: item.ShippingLineId,\r\n                        shippingLineName: item.ShippingLineName,\r\n                        economicCode: item.EconomicCode,\r\n                        tel: item.Tel,\r\n                        address: item.Address,\r\n                        email: item.Email,\r\n                        nationalCode: item.NationalCode\r\n                    }\r\n                })\r\n                setState(prevState => ({ ...prevState, ListOfShippingLines: tempList }))\r\n            }\r\n        }).catch(err => { });\r\n    }, []);\r\n\r\n    const handleEditShippingLine = (shippingLineData) => {\r\n        const ShippingLine = { ..._(state.ListOfShippingLines).filter(c => c.shippingLineId === shippingLineData.shippingLineId).first() };\r\n        const temp = {\r\n            shippingLineName: ShippingLine.shippingLineName,\r\n            tel: ShippingLine.tel,\r\n            email: ShippingLine.email,\r\n            address: ShippingLine.address,\r\n            nationalCode: ShippingLine.nationalCode,\r\n            economicCode: ShippingLine.economicCode,\r\n            id: ShippingLine.shippingLineId\r\n        }\r\n        setState(prevState => ({ ...prevState, currentRow: temp }));\r\n        editToggle();\r\n    }\r\n    const editToggle = () => {\r\n        setState(prevState => ({ ...prevState, editModal: !state.editModal }))\r\n    }\r\n    const handleCancelEditShippingLine = () => {\r\n        setState(prevState => ({ ...prevState, currentRow: {} }));\r\n        editToggle();\r\n    }\r\n    const handleCreateShippingLine = () => {\r\n        setState(prevState => ({ ...prevState, currentRow: {} }))\r\n        createToggle();\r\n    }\r\n    const createToggle = () => {\r\n        setState(prevState => ({ ...prevState, createModal: !state.createModal }))\r\n    }\r\n    const handleCancelCreateShippingLine = () => {\r\n        setState(prevState => ({ ...prevState, currentRow: {} }))\r\n        createToggle();\r\n    }\r\n    return (<React.Fragment>\r\n        <Row className=\"row-eq-height\">\r\n            <Col sm=\"12\" md=\"12\">\r\n                <Card>\r\n                    <CardBody>\r\n                        <div className=\"form-body\">\r\n                            <Row>\r\n                                <Col md='9'>\r\n                                    <h4 className=\"form-section\">\r\n                                        <ShoppingBag size={20} color=\"#212529\" /> Shipping Lines\r\n                                    </h4>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Button color=\"success\" type=\"button\" onClick={handleCreateShippingLine}>\r\n                                        Add New Shipping Line\r\n                                </Button>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col md=\"12\">\r\n                                    <FormGroup>\r\n                                        <Table\r\n                                            className={antdClass + antdClass2}\r\n                                            columns={columns}\r\n                                            dataSource={state.ListOfShippingLines}\r\n                                            pagination={{ position: [\"bottomCenter\"] }}\r\n                                            scroll={{ x: 'max-content', y: 200 }} />\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    </CardBody>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n        <Modal\r\n            isOpen={state.editModal}\r\n            toggle={editToggle}\r\n            className={props.className}\r\n            backdrop=\"static\"\r\n        >\r\n            <ModalHeader toggle={editToggle} >Edit Shipping Line\r\n                <ModalBody>\r\n                    <Formik initialValues={state.currentRow || initialValues}\r\n                        validationSchema={validationSchema}\r\n                        onSubmit={(values) => {\r\n                            onSubmitEditShippingLine(values, props);\r\n                        }}\r\n                        validateOnBlur={true}\r\n                        enableReinitialize>\r\n                        {(formik) => {\r\n                            console.log(\"Formik props values\", formik.values);\r\n                            return (\r\n                                <React.Fragment>\r\n                                    <Form>\r\n                                        <div className=\"form-body\">\r\n\r\n                                            <Row>\r\n                                                <Col md=\"6\">\r\n                                                    <FormikControl\r\n                                                        control=\"inputMaskDebounce\"\r\n                                                        name=\"shippingLineName\"\r\n                                                        className=\"ltr\"\r\n                                                        type='text'\r\n                                                        label=\"shipping Line name\"\r\n                                                        defaultValue={\r\n                                                            state.currentRow.shippingLineName\r\n                                                        }\r\n                                                    />\r\n                                                </Col>\r\n                                                <Col md=\"6\">\r\n                                                    <FormikControl\r\n                                                        control=\"inputMaskDebounce\"\r\n                                                        type=\"number\"\r\n                                                        name=\"economicCode\"\r\n                                                        className=\"ltr\"\r\n                                                        label='economic code'\r\n                                                        defaultValue={\r\n                                                            state.currentRow.economicCode\r\n                                                        }\r\n                                                    />\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col md=\"6\">\r\n                                                    <FormikControl\r\n                                                        control=\"inputMaskDebounce\"\r\n                                                        type=\"number\"\r\n                                                        name=\"tel\"\r\n                                                        className=\"ltr\"\r\n                                                        label=\"tel\"\r\n                                                        defaultValue={\r\n                                                            state.currentRow.tel\r\n                                                        }\r\n                                                    />\r\n                                                </Col>\r\n                                                <Col md=\"6\">\r\n                                                    <FormikControl\r\n                                                        control=\"inputMaskDebounce\"\r\n                                                        type=\"text\"\r\n                                                        name=\"email\"\r\n                                                        className=\"ltr\"\r\n                                                        label=\"email\"\r\n                                                        defaultValue={\r\n                                                            state.currentRow.email\r\n                                                        }\r\n                                                    />\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col md=\"6\">\r\n                                                    <FormikControl\r\n                                                        control=\"inputMaskDebounce\"\r\n                                                        type=\"text\"\r\n                                                        name=\"address\"\r\n                                                        className=\"ltr\"\r\n                                                        label=\"address\"\r\n                                                        defaultValue={\r\n                                                            state.currentRow.address\r\n                                                        }\r\n                                                    />\r\n                                                </Col>\r\n                                                <Col md=\"6\">\r\n                                                    <FormikControl\r\n                                                        control=\"inputMaskDebounce\"\r\n                                                        name=\"nationalCode\"\r\n                                                        type=\"number\"\r\n                                                        label=\"national code\"\r\n                                                        className=\"ltr\"\r\n                                                        defaultValue={\r\n                                                            state.currentRow.nationalCode\r\n                                                        }\r\n                                                    />\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </div>\r\n                                        <div className=\"form-actions center\">\r\n                                            <Button color=\"primary\" type=\"submit\" className=\"mr-1\" >\r\n                                                <CheckSquare size={16} color=\"#FFF\" /> Save\r\n                                             </Button>\r\n                                            <Button color=\"warning\" type=\"button\" onClick={handleCancelEditShippingLine} >\r\n                                                <X size={16} color=\"#FFF\" /> Cancel\r\n                                                </Button>\r\n\r\n                                        </div>\r\n                                    </Form>\r\n                                </React.Fragment>\r\n                            );\r\n                        }}\r\n\r\n                    </Formik>\r\n                </ModalBody>\r\n            </ModalHeader>\r\n        </Modal>\r\n\r\n        <Modal\r\n            isOpen={state.createModal}\r\n            toggle={createToggle}\r\n            className={props.className}\r\n            backdrop=\"static\"\r\n        >\r\n            <ModalHeader toggle={createToggle}>Create New Shipping Line</ModalHeader>\r\n            <ModalBody>\r\n\r\n                <Formik\r\n                    initialValues={initialValues}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values) => {\r\n                        onSubmitCreateShippingLine(values, props);\r\n                    }}\r\n                    validateOnBlur={true}\r\n                    enableReinitialize\r\n                >\r\n                    {(formik) => {\r\n                        console.log(\"Formik props values\", formik.values);\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Form>\r\n                                    <div className=\"form-body\">\r\n                                        <Row>\r\n                                            <Col md=\"6\">\r\n                                                <FormikControl\r\n                                                    control=\"inputMaskDebounce\"\r\n                                                    name=\"shippingLineName\"\r\n                                                    className=\"ltr\"\r\n                                                    type='text'\r\n                                                    label=\"shipping Line name\"\r\n                                                    defaultValue={\r\n                                                        state.currentRow.shippingLineName\r\n                                                    }\r\n                                                />\r\n                                            </Col>\r\n                                            <Col md=\"6\">\r\n                                                <FormikControl\r\n                                                    control=\"inputMaskDebounce\"\r\n                                                    type=\"number\"\r\n                                                    name=\"economicCode\"\r\n                                                    className=\"ltr\"\r\n                                                    label='economic code'\r\n                                                    defaultValue={\r\n                                                        state.currentRow.economicCode\r\n                                                    }\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col md=\"6\">\r\n                                                <FormikControl\r\n                                                    control=\"inputMaskDebounce\"\r\n                                                    type=\"number\"\r\n                                                    name=\"tel\"\r\n                                                    className=\"ltr\"\r\n                                                    label=\"tel\"\r\n                                                    defaultValue={\r\n                                                        state.currentRow.tel\r\n                                                    }\r\n                                                />\r\n                                            </Col>\r\n                                            <Col md=\"6\">\r\n                                                <FormikControl\r\n                                                    control=\"inputMaskDebounce\"\r\n                                                    type=\"text\"\r\n                                                    name=\"email\"\r\n                                                    className=\"ltr\"\r\n                                                    label=\"email\"\r\n                                                    defaultValue={\r\n                                                        state.currentRow.email\r\n                                                    }\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col md=\"6\">\r\n                                                <FormikControl\r\n                                                    control=\"inputMaskDebounce\"\r\n                                                    type=\"text\"\r\n                                                    name=\"address\"\r\n                                                    className=\"ltr\"\r\n                                                    label=\"address\"\r\n                                                    defaultValue={\r\n                                                        state.currentRow.address\r\n                                                    }\r\n                                                />\r\n                                            </Col>\r\n                                            <Col md=\"6\">\r\n                                                <FormikControl\r\n                                                    control=\"inputMaskDebounce\"\r\n                                                    name=\"nationalCode\"\r\n                                                    type=\"number\"\r\n                                                    label=\"national code\"\r\n                                                    className=\"ltr\"\r\n                                                    defaultValue={\r\n                                                        state.currentRow.nationalCode\r\n                                                    }\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </div>\r\n                                    <div className=\"form-actions center\">\r\n                                        <Button color=\"primary\" type=\"submit\" className=\"mr-1\" >\r\n                                            <CheckSquare size={16} color=\"#FFF\" /> Save\r\n                         </Button>\r\n                                        <Button color=\"warning\" type=\"button\" onClick={handleCancelCreateShippingLine} >\r\n                                            <X size={16} color=\"#FFF\" /> Cancel\r\n                            </Button>\r\n\r\n                                    </div>\r\n                                </Form>\r\n                            </React.Fragment>\r\n                        );\r\n                    }}\r\n                </Formik>\r\n            </ModalBody>\r\n\r\n        </Modal>\r\n\r\n\r\n    </React.Fragment>);\r\n}\r\n\r\nexport default ShippingLinesPage;","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\basic-info\\countriesPage.jsx",["430"],"import React, { useState, useEffect } from \"react\";\r\nimport { Card, CardBody, FormGroup, Row, Col } from \"reactstrap\";\r\nimport { Table } from 'antd';\r\nimport { toast } from \"react-toastify\";\r\nimport _ from \"lodash\";\r\n\r\nimport antdClass from 'antd/dist/antd.css';\r\nimport antdClass2 from \"../../../assets/css/vendors/customAntdTable.css\"\r\nimport { getCountries } from \"../../../services/countryService\"\r\n\r\ntoast.configure({ bodyClassName: \"customFont\" });\r\n\r\n\r\n\r\nconst CountriesPage = () => {\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'countryName',\r\n            key: 'countryName',\r\n            sorter: {\r\n                compare: (a, b) => a.countryName.localeCompare(b.countryName),\r\n                multiple: 4\r\n            },\r\n            sortDirections: ['ascend', 'descend'],\r\n            defaultSortOrder: 'ascend',\r\n        },\r\n        {\r\n            title: 'Symbol',\r\n            dataIndex: 'symbol',\r\n            key: 'symbol'\r\n        }\r\n    ];\r\n\r\n    const [state, setState] = useState({\r\n        listOfCountries: [],\r\n        currentRow: {}\r\n    });\r\n\r\n    useEffect(() => {\r\n        getCountries().then(res => {\r\n            if (res.data.result) {\r\n                //console.log('Countries', res);\r\n                const tempList = res.data.data.map(item => {\r\n                    return {\r\n                        key: item.CountryId,\r\n                        countryId: item.CountryId,\r\n                        countryName: item.CountryName,\r\n                        symbol: item.Symbol\r\n                    }\r\n                })\r\n                setState(prevState => ({ ...prevState, ListOfCountries: tempList }))\r\n            }\r\n            else {\r\n                return toast.error(res.data.data[0]);\r\n            }\r\n        }).catch(() => { });\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <Row className=\"row-eq-height\">\r\n                <Col sm=\"12\" md=\"12\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <div className=\"form-body\">\r\n                                <Row>\r\n                                    <Col md=\"12\">\r\n                                        <FormGroup>\r\n                                            <Table\r\n                                                className={antdClass + antdClass2}\r\n                                                columns={columns}\r\n                                                dataSource={state.ListOfCountries}\r\n                                                pagination={{ position: [\"bottomCenter\"] }}\r\n                                                scroll={{ x: 'max-content', y: 200 }}\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                            </div>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default CountriesPage;","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\basic-info\\voyagesPage.jsx",["431","432","433","434","435","436","437","438","439","440","441","442","443"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Button,\r\n  FormGroup,\r\n  Row,\r\n  Col,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n} from \"reactstrap\";\r\nimport { Table, Space, Switch } from \"antd\";\r\nimport { CloseOutlined, CheckOutlined } from \"@ant-design/icons\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { ShoppingBag, Edit2, CheckSquare, X } from \"react-feather\";\r\nimport * as Yup from \"yup\";\r\nimport { toast } from \"react-toastify\";\r\nimport _, { isDate } from \"lodash\";\r\nimport FormikControl from \"../../../components/common/formik/FormikControl\";\r\nimport antdClass from \"antd/dist/antd.css\";\r\nimport antdClass2 from \"../../../assets/css/vendors/customAntdTable.css\";\r\nimport moment from \"jalali-moment\";\r\n\r\nimport {\r\n  addNewVoyageInfo,\r\n  editVoyageInfo,\r\n  getVoyage,\r\n} from \"../../../services/voyageService\";\r\nimport { getVessels } from \"../../../services/vesselService\";\r\nimport { getPorts } from \"../../../services/portServices\";\r\nimport { getShippingLines } from \"../../../services/shippingLineService\";\r\ntoast.configure({ bodyClassName: \"customFont\" });\r\n\r\nconst initialValues = {\r\n  selectVessel: \"\",\r\n  incomingVoyageNo: \"\",\r\n  outgoingVoyageNo: \"\",\r\n  selectOwner: \"\",\r\n  selectAgent: \"\",\r\n  eta: \"\",\r\n  ata: \"\",\r\n  etd: \"\",\r\n  atd: \"\",\r\n  voyageStatus: \"\",\r\n  selectOriginPort: \"\",\r\n  selectPreviousPort: \"\",\r\n  selectNextPort: \"\",\r\n};\r\nconst validationSchema = Yup.object().shape({\r\n  selectVessel: Yup.string().required(\"Entet Vessel Name!\"),\r\n  incomingVoyageNo: Yup.string().required(\"Enter Incoming Voyage Number!\"),\r\n  selectOwner: Yup.string().required(\"Enter Owner Of Voyage!\"),\r\n  selectAgent: Yup.string().required(\"Enter Agent Of Voyage!\"),\r\n  eta: Yup.string().required(\"Enter ETA Date!\")\r\n  // atd: Yup.string()\r\n  //   .when(\"voyageStatus\", {\r\n  //     is: false,\r\n  //     then: Yup.string().test(\"\", \"invalid date\", (value) => //moment(value, \"YYYY-MM-DD HH:mm:ss\",true).isValid()\r\n\r\n  //     {\r\n  //      const asd = moment(undefined).format('YYYY-MM-DD HH:mm:ss')\r\n\r\n  //    //   console.log('asd',asd,value)\r\n  //     }\r\n  //     )\r\n  //   }),\r\n  // voyageStatus: Yup.boolean().required(\"Select Voyage Status!\"),\r\n});\r\nconst VoyagesPage = (props) => {\r\n  const onSubmitEditVoyage = (values) => {\r\n\r\n     console.log('from edit voyage', values)\r\n    // if (values === state.currentRow) return;\r\n    let parameters = {\r\n      voyageId: values.id,\r\n      voyageNoIn: values.incomingVoyageNo,\r\n      voyageNoOut: values.outgoingVoyageNo,\r\n      voyageVessel: values.incomingVoyageNo + '/' + values.selectVessel.label,\r\n      vesselId: values.selectVessel.value,\r\n      ownerId: values.selectOwner.value,\r\n      agentId: values.selectAgent.value,\r\n      estimatedTimeArrival: values.eta,\r\n      actualTimeArrival: values.ata,\r\n      estimatedTimeDeparture: values.etd,\r\n      actualTimeDeparture: values.atd,\r\n      voyageStatus: values.voyageStatus ? 1 : 0,\r\n      originPort: values.selectOriginPort.value,\r\n      previousPort: values.selectPreviousPort.value,\r\n      nextPort: values.selectNextPort.value\r\n    };\r\n    // console.log('from edit voyage after', parameters)\r\n    editVoyageInfo(parameters)\r\n      .then((response) => {\r\n        // console.log('response',response)\r\n        if (response.data.result) {\r\n          toast.success(response.data.data[0]);\r\n          const lstVoyages = [...state.ListOfVoyages];\r\n          const index = _(lstVoyages).findIndex(\r\n            (c) => c.voyageId === values.id\r\n          );\r\n          lstVoyages[index] = { ...lstVoyages[index] };\r\n          lstVoyages[index].key = values.id;\r\n          lstVoyages[index].voyageId = values.id;\r\n          lstVoyages[index].actualTimeArrival = values.ata;\r\n          lstVoyages[index].actualTimeDeparture = values.atd;\r\n          lstVoyages[index].agentId = values.selectAgent.value;\r\n          lstVoyages[index].agentName = values.selectAgent.label;\r\n          lstVoyages[index].estimatedTimeArrival = values.eta;\r\n          lstVoyages[index].estimatedTimeDeparture = values.etd;\r\n          lstVoyages[index].incomingVoyageNo = values.incomingVoyageNo;\r\n          lstVoyages[index].nextPortId = values.selectNextPort.value;\r\n          lstVoyages[index].nextPortName = values.selectNextPort.label;\r\n          lstVoyages[index].originPortId = values.selectOriginPort.value;\r\n          lstVoyages[index].originPortName = values.selectOriginPort.label;\r\n          lstVoyages[index].outgoingVoyageNo = values.outgoingVoyageNo;\r\n          lstVoyages[index].ownerId = values.selectOwner.value;\r\n          lstVoyages[index].ownerName = values.selectOwner.label;\r\n          lstVoyages[index].previousPortId = values.selectPreviousPort.value;\r\n          lstVoyages[index].previousPortName = values.selectPreviousPort.label;\r\n          lstVoyages[index].vesselId = values.selectVessel.value;\r\n          lstVoyages[index].vesselName = values.selectVessel.label;\r\n          lstVoyages[index].voyageStatus = values.voyageStatus ? \"open\" : \"close\";\r\n          lstVoyages[index].voyageStatusCode = values.voyageStatus ? 1 : 0;\r\n          //   console.log(\"from submuit\", lstVoyages[index]);\r\n\r\n          setState((prevState) => ({\r\n            ...prevState,\r\n            ListOfVoyages: lstVoyages,\r\n            currentRow: {},\r\n          }));\r\n          editToggle();\r\n        } else {\r\n          toast.error(response.data.data[0]);\r\n        }\r\n      })\r\n  };\r\n\r\n  const onSubmitCreateVoyage = (values) => {\r\n    console.log('from edit voyage', values)\r\n    let parameters = {\r\n      incomingVoyageNo: values.incomingVoyageNo,\r\n      outgoingVoyageNo: values.outgoingVoyageNo,\r\n      voyageVessel: values.incomingVoyageNo + '/' + values.selectVessel.label,\r\n      vesselId: values.selectVessel.value,\r\n      ownerId: values.selectOwner.value,\r\n      agentId: values.selectAgent.value,\r\n      estimatedTimeArrival: values.eta,\r\n      actualTimeArrival: values.ata,\r\n      estimatedTimeDeparture: values.etd,\r\n      actualTimeDeparture: values.atd,\r\n      voyageStatusCode: values.voyageStatus ? 1 : 0,\r\n      originPortId: values.selectOriginPort.value,\r\n      previousPortId: values.selectPreviousPort.value,\r\n      nextPortId: values.selectNextPort.value\r\n    };\r\n    addNewVoyageInfo(parameters)\r\n      .then((response) => {\r\n        // console.log('response',response)\r\n        if (response.data.result) {\r\n          toast.success(response.data.data[0]['message']);\r\n\r\n          const lstVoyages = [...state.ListOfVoyages];\r\n          parameters.voyageId = response.data.data[0]['voyageId'];\r\n          parameters.key = response.data.data[0]['voyageId'];\r\n          parameters.agentName = values.selectAgent.label;\r\n          parameters.incomingVoyageNo = values.incomingVoyageNo;\r\n          parameters.nextPortName = values.selectNextPort.label;\r\n          parameters.originPortName = values.selectOriginPort.label;\r\n          parameters.ownerName = values.selectOwner.label;\r\n          parameters.previousPortName = values.selectPreviousPort.label;\r\n          parameters.vesselName = values.selectVessel.label;\r\n          parameters.voyageStatus = values.voyageStatus ? \"open\" : \"close\";\r\n          lstVoyages.push(parameters);\r\n\r\n          setState((prevState) => ({ ...prevState, ListOfVoyages: lstVoyages, currentRow: {} }));\r\n          createToggle();\r\n        } else {\r\n          toast.error(response.data.data[0]);\r\n        }\r\n      })\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Action\",\r\n      key: \"action\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\"> \r\n          <Button\r\n            className=\"btn-warning mt-1\"\r\n            size=\"sm\"\r\n            onClick={() => handleEditVoyage(record)}\r\n          >\r\n            <Edit2 size={16} />\r\n          </Button>\r\n        </Space>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Incoming Voyage No\",\r\n      dataIndex: \"incomingVoyageNo\",\r\n      key: \"voyageNoIn\",\r\n      sorter: {\r\n        compare: (a, b) => a.incomingVoyageNo.localeCompare(b.incomingVoyageNo),\r\n        multiple: 3,\r\n      },\r\n      sortDirections: [\"ascend\", \"descend\"],\r\n      defaultSortOrder: \"ascend\",\r\n    },\r\n    {\r\n      title: \"Outgoing Voyage No\",\r\n      dataIndex: \"outgoingVoyageNo\",\r\n      key: \"voyageNoOut\",\r\n      sorter: {\r\n        compare: (a, b) => a.outgoingVoyageNo.localeCompare(b.outgoingVoyageNo),\r\n        multiple: 4,\r\n      },\r\n      sortDirections: [\"ascend\", \"descend\"],\r\n      defaultSortOrder: \"ascend\",\r\n    },\r\n    {\r\n      title: \"Vessel\",\r\n      dataIndex: \"vesselName\",\r\n      key: \"vesselName\",\r\n    },\r\n    {\r\n      title: \"Owner\",\r\n      dataIndex: \"ownerName\",\r\n      key: \"wner\",\r\n    },\r\n    {\r\n      title: \"Agent\",\r\n      dataIndex: \"agentName\",\r\n      key: \"agent\",\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      dataIndex: \"voyageStatus\",\r\n      key: \"status\",\r\n    },\r\n    {\r\n      title: \"ETA\",\r\n      dataIndex: \"estimatedTimeArrival\",\r\n      key: \"eta\",\r\n    },\r\n    {\r\n      title: \"ATA\",\r\n      dataIndex: \"actualTimeArrival\",\r\n      key: \"ata\",\r\n    },\r\n    {\r\n      title: \"ETD\",\r\n      dataIndex: \"estimatedTimeDeparture\",\r\n      key: \"etd\",\r\n    },\r\n    {\r\n      title: \"ATD\",\r\n      dataIndex: \"actualTimeDeparture\",\r\n      key: \"atd\",\r\n    },\r\n    {\r\n      title: \"Origin Port\",\r\n      dataIndex: \"originPortName\",\r\n      key: \"OriginPort\",\r\n    },\r\n    {\r\n      title: \"Previous Port\",\r\n      dataIndex: \"previousPortName\",\r\n      key: \"previous\",\r\n    },\r\n    {\r\n      title: \"Next Port\",\r\n      dataIndex: \"nextPortName\",\r\n      key: \"nextPort\",\r\n    },\r\n  ];\r\n\r\n  const [validVoyageStatus, setValidVoyageStatus] = useState({\r\n    message: \"\",\r\n    result: true,\r\n  });\r\n\r\n  const [state, setState] = useState({\r\n    //ListOfUserTypes: [],\r\n\r\n    ListOfOriginPorts: [],\r\n    ListOfPreviousPorts: [],\r\n    ListOfNextPorts: [],\r\n    ListOfAgents: [],\r\n    ListOfOwners: [],\r\n    ListOfVessels: [],\r\n    ListOfVoyages: [],\r\n    voyageStatus: 1,\r\n    eta: null,\r\n    ata: null,\r\n    etd: null,\r\n    atd: null,\r\n    editModal: false,\r\n    createModal: false,\r\n    currentRow: {},\r\n  });\r\n\r\n  useEffect(() => {\r\n    getVoyage()\r\n      .then((res) => {\r\n         console.log('response', res.data.data)\r\n        if (res.data.result) {\r\n          const tempList = res.data.data.map((item) => {\r\n            return {\r\n              key: item.voyageId,\r\n              voyageId: item.voyageId,\r\n              incomingVoyageNo: item.incomingVoyageNo,\r\n              outgoingVoyageNo: item.outgoingVoyageNo,\r\n              estimatedTimeArrival: item.estimatedTimeArrival,\r\n              actualTimeArrival: item.actualTimeArrival,\r\n              estimatedTimeDeparture: item.estimatedTimeDeparture,\r\n              actualTimeDeparture: item.actualTimeDeparture,\r\n              agentId: item.agentId,\r\n              agentName: item.agentName,\r\n              ownerId: item.ownerId,\r\n              ownerName: item.ownerName,\r\n              vesselId: item.vesselId,\r\n              vesselName: item.vesselName,\r\n              previousPortId: item.previousPortId,\r\n              previousPortName: item.previousPortName,\r\n              nextPortId: item.nextPortId,\r\n              nextPortName: item.nextPortName,\r\n              originPortId: item.originPortId,\r\n              originPortName: item.originPortName,\r\n              voyageStatusCode: item.voyageStatusCode,\r\n              voyageStatus: item.voyageStatus,\r\n            };\r\n          });\r\n          //console.log('templist', tempList)\r\n          setState((prevState) => ({ ...prevState, ListOfVoyages: tempList }));\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        // console.log('error',err)\r\n      });\r\n    getVessels()\r\n      .then((res) => {\r\n        if (res.data.result) {\r\n          const tempList = res.data.data.map((item) => {\r\n            return {\r\n              value: item.VesselId,\r\n              label: item.VesselName,\r\n            };\r\n          });\r\n          setState((prevState) => ({ ...prevState, ListOfVessels: tempList }));\r\n        }\r\n      })\r\n      .catch((err) => { });\r\n\r\n    getPorts()\r\n      .then((res) => {\r\n        if (res.data.result) {\r\n          const temp = res.data.data.map((item) => {\r\n            return { label: item.PortName, value: item.PortId };\r\n          });\r\n          setState((prevState) => ({\r\n            ...prevState,\r\n            ListOfOriginPorts: temp,\r\n            ListOfPreviousPorts: temp,\r\n            ListOfNextPorts: temp,\r\n          }));\r\n        }\r\n      })\r\n      .catch((err) => { });\r\n\r\n    getShippingLines()\r\n      .then((res) => {\r\n        if (res.data.result) {\r\n          const temp = res.data.data.map((item) => {\r\n            return { label: item.ShippingLineName, value: item.ShippingLineId };\r\n          });\r\n          setState((prevState) => ({\r\n            ...prevState,\r\n            ListOfAgents: temp,\r\n            ListOfOwners: temp,\r\n          }));\r\n        }\r\n      })\r\n      .catch((err) => { });\r\n  }, []);\r\n  const handleEditVoyage = (voyageData) => {\r\n    console.log('from handel voyage edit', voyageData)\r\n    const Voyage = {\r\n      ..._(state.ListOfVoyages)\r\n        .filter((c) => c.voyageId === voyageData.voyageId)\r\n        .first(),\r\n    };\r\n    console.log('from handel voyage List of voyage', Voyage)\r\n    const temp = {\r\n      selectVessel: {\r\n        label: Voyage.vesselName,\r\n        value: Voyage.vesselId,\r\n      },\r\n      selectAgent: {\r\n        label: Voyage.agentName,\r\n        value: Voyage.agentId,\r\n      },\r\n      selectOwner: {\r\n        label: Voyage.ownerName,\r\n        value: Voyage.ownerId,\r\n      },\r\n      selectOriginPort: {\r\n        label: Voyage.originPortName,\r\n        value: Voyage.originPortId,\r\n      },\r\n      selectNextPort: {\r\n        label: Voyage.nextPortName,\r\n        value: Voyage.nextPortId,\r\n      },\r\n      selectPreviousPort: {\r\n        label: Voyage.previousPortName,\r\n        value: Voyage.previousPortId,\r\n      },\r\n      eta: Voyage.estimatedTimeArrival,\r\n      ata: Voyage.actualTimeArrival,\r\n      etd: Voyage.estimatedTimeDeparture,\r\n      atd: Voyage.actualTimeDeparture,\r\n      voyageStatus: Voyage.voyageStatus,\r\n      voyageStatusCode: Voyage.voyageStatusCode,\r\n      outgoingVoyageNo: Voyage.outgoingVoyageNo,\r\n      incomingVoyageNo: Voyage.incomingVoyageNo,\r\n      id: Voyage.voyageId,\r\n    };\r\n\r\n    setState((prevState) => ({ ...prevState, currentRow: temp }));\r\n    setTimeout(() => {\r\n      console.log('current row ', temp)\r\n      \r\n    }, 1000);\r\n    editToggle();\r\n  };\r\n\r\n  const editToggle = () => {\r\n    setState((prevState) => ({ ...prevState, editModal: !state.editModal }));\r\n  };\r\n\r\n  const handleCancelEditVoyage = () => {\r\n    setState((prevState) => ({ ...prevState, currentRow: {} }));\r\n    editToggle();\r\n  };\r\n\r\n  const handleCreateVoyage = () => {\r\n    setState((prevState) => ({ ...prevState, currentRow: {} }));\r\n    createToggle();\r\n  };\r\n\r\n  const createToggle = () => {\r\n    setState((prevState) => ({ ...prevState, createModal: !state.createModal }));\r\n  };\r\n\r\n  const handleCancelCreateVoyage = () => {\r\n    setState((prevState) => ({ ...prevState, currentRow: {} }));\r\n    createToggle();\r\n  };\r\n  const handleVesselSelectedChanged = (value) => {\r\n    //console.log(\"from hande vessel \", value);\r\n  };\r\n  const handleOwnerSelectedChanged = () => { };\r\n  const handleAgentSelectedChanged = () => { };\r\n  const handlePreviousPortSelectedChanged = () => { };\r\n  const handleOriginPortSelectedChanged = () => { };\r\n  const handleNextPortSelectedChanged = () => { };\r\n  const handleStatustSelectedChanged = (value, formik) => {\r\n   console.log('from handle status ', value)\r\n    if (!value) {\r\n\r\n      formik.setFieldTouched('atd',true);\r\n    }\r\n  };\r\n  const dtChange1 = (value) => { };\r\n  const dtChange2 = (value) => { };\r\n  console.log(\"from status change\", state.currentRow);\r\n  return (\r\n    <React.Fragment>\r\n      <Row className=\"row-eq-height\">\r\n        <Col sm=\"12\" md=\"12\">\r\n          <Card>\r\n            <CardBody>\r\n              {/* <CardTitle>Users</CardTitle> */}\r\n              {/* <CardText>With supporting text below as a natural lead-in to additional content.</CardText> */}\r\n              {/* <Form> */}\r\n              <div className=\"form-body\">\r\n                <Row>\r\n                  <Col md=\"9\">\r\n                    <h4 className=\"form-section\">\r\n                      <ShoppingBag size={20} color=\"#212529\" /> Voyages\r\n                    </h4>\r\n                  </Col>\r\n                  <Col>\r\n                    <Button\r\n                      color=\"success\"\r\n                      type=\"button\"\r\n                      onClick={handleCreateVoyage}\r\n                    >\r\n                      Add New Voyage\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col md=\"12\">\r\n                    <FormGroup>\r\n                      <Table\r\n                        className={antdClass + antdClass2}\r\n                        columns={columns}\r\n                        dataSource={state.ListOfVoyages}\r\n                        pagination={{ position: [\"bottomCenter\"] }}\r\n                        scroll={{ x: 2700, y: 200 }}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n              </div>\r\n              {/* </Form> */}\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Modal\r\n        isOpen={state.editModal}\r\n        toggle={editToggle}\r\n        className={props.className}\r\n        backdrop=\"static\"\r\n      >\r\n        <ModalHeader toggle={editToggle}>\r\n          Edit Voyage: {state.currentRow.incomingVoyageNo}\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Formik\r\n            initialValues={state.currentRow}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values) => {\r\n              onSubmitEditVoyage(values);\r\n            }}\r\n            // validateOnBlur={true}\r\n            validateOnChange={true}\r\n            validateOnMount={true}\r\n            enableReinitialize\r\n          >\r\n            {(formik) => {\r\n              return (\r\n                <React.Fragment>\r\n                  <Form>\r\n                    <div className=\"form-body\">\r\n                      <Row>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customSelect\"\r\n                            name=\"selectVessel\"\r\n                            selectedValue={state.currentRow.selectVessel}\r\n                            options={state.ListOfVessels}\r\n                            label=\"Vessel Name\"\r\n                          />\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customSelect\"\r\n                            name=\"selectOriginPort\"\r\n                            selectedValue={state.currentRow.selectOriginPort}\r\n                            options={state.ListOfOriginPorts}\r\n                            label=\"Origin Port Name\"\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customSelect\"\r\n                            name=\"selectNextPort\"\r\n                            selectedValue={state.currentRow.selectNextPort}\r\n                            options={state.ListOfNextPorts}\r\n                            label=\"Next Port Name\"\r\n                          />\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customSelect\"\r\n                            name=\"selectPreviousPort\"\r\n                            selectedValue={state.currentRow.selectPreviousPort}\r\n                            options={state.ListOfPreviousPorts}\r\n                            label=\"Previous Port Name\"\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customSelect\"\r\n                            name=\"selectAgent\"\r\n                            selectedValue={state.currentRow.selectAgent}\r\n                            options={state.ListOfAgents}\r\n                            label=\"Agent Name\"\r\n                          />\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customSelect\"\r\n                            name=\"selectOwner\"\r\n                            selectedValue={state.currentRow.selectOwner}\r\n                            options={state.ListOfOwners}\r\n                            label=\"Owner Name\"\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"inputMaskDebounce\"\r\n                            name=\"incomingVoyageNo\"\r\n                            className=\"ltr\"\r\n                            type=\"text\"\r\n                            label=\"Incoming Voyage No\"\r\n                            defaultValue={state.currentRow.incomingVoyageNo}\r\n                          />\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"inputMaskDebounce\"\r\n                            type=\"text\"\r\n                            name=\"outgoingVoyageNo\"\r\n                            className=\"ltr\"\r\n                            label=\"Outgoing Voyage No\"\r\n                            defaultValue={state.currentRow.outgoingVoyageNo}\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customDateTimePicker\"\r\n                            name=\"eta\"\r\n                            locale=\"en\"\r\n                            label=\"Estimated Time Arrival\"\r\n                            placeholder=\"Select Enter Date\"\r\n                            selectedValue={\r\n                              state.currentRow && state.currentRow.eta\r\n                                ? state.currentRow.eta\r\n                                : null\r\n                            }\r\n                            //defaultValue={{ day: 14, month: 7, year: 1399 }}\r\n                            onSelectedChanged={dtChange1}\r\n                          />\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customDateTimePicker\"\r\n                            name=\"ata\"\r\n                            label=\"Actual Time Arrival\"\r\n                            placeholder=\"Select Enter Date\"\r\n                            selectedValue={\r\n                              state.currentRow && state.currentRow.ata\r\n                                ? state.currentRow.ata\r\n                                : null\r\n                            }\r\n                            //defaultValue={{ day: 10, month: 6, year: 1399 }}\r\n                            onSelectedChanged={dtChange2}\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customDateTimePicker\"\r\n                            name=\"etd\"\r\n                            label=\"Estimated Time Departure\"\r\n                            placeholder=\"Select Enter Date\"\r\n                            selectedValue={\r\n                              state.currentRow && state.currentRow.etd\r\n                                ? state.currentRow.etd\r\n                                : null\r\n                            }\r\n                            //defaultValue={{ day: 14, month: 7, year: 1399 }}\r\n                            onSelectedChanged={dtChange1}\r\n                          />\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customDateTimePicker\"\r\n                            name=\"atd\"\r\n                            label=\"Actual Time Departure\"\r\n                            placeholder=\"Select Enter Date\"\r\n                            selectedValue={\r\n                              state.currentRow && state.currentRow.atd\r\n                                ? state.currentRow.atd\r\n                                : null\r\n                            }\r\n                            onSelectedChanged={dtChange2}\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col\r\n                          md=\"4\"\r\n                          style={{\r\n                            justifyContent: \"right\",\r\n                            direction: \"rtl\",\r\n                            display: \"flex\",\r\n                          }}\r\n                        >\r\n                          <FormikControl\r\n                            control=\"customSwitch\"\r\n                            name=\"voyageStatus\"\r\n                            label=\"Voyage Status\"\r\n                            unCheckedChildren=\"Close\"\r\n                            checkedChildren=\"Open\"\r\n                            selectedValue={\r\n                              state.currentRow && state.currentRow.voyageStatus === 'open'? true : false\r\n                            }\r\n                            onSelectedChanged={(value) =>\r\n                              handleStatustSelectedChanged(value, formik)\r\n                            }\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                    </div>\r\n                    <div className=\"form-actions center\">\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        className=\"mr-1\"\r\n                        disabled={!formik.isValid}\r\n                      >\r\n                        <CheckSquare size={16} color=\"#FFF\" /> Save\r\n                      </Button>\r\n                      <Button\r\n                        color=\"warning\"\r\n                        type=\"button\"\r\n                        onClick={handleCancelEditVoyage}\r\n                      >\r\n                        <X size={16} color=\"#FFF\" /> Cancel\r\n                      </Button>\r\n                    </div>\r\n                  </Form>\r\n                </React.Fragment>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </ModalBody>\r\n      </Modal>\r\n      <Modal\r\n        isOpen={state.createModal}\r\n        toggle={editToggle}\r\n        className={props.className}\r\n        backdrop=\"static\"\r\n      >\r\n        <ModalHeader toggle={createToggle}>\r\n          Add New Voyage\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={(values) => {\r\n              onSubmitCreateVoyage(values);\r\n            }}\r\n            // validateOnBlur={true}\r\n            validateOnChange={true}\r\n            validateOnMount={true}\r\n            enableReinitialize\r\n          >\r\n            {(formik) => {\r\n              return (\r\n                <React.Fragment>\r\n                  <Form>\r\n                    <div className=\"form-body\">\r\n                      <Row>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customSelect\"\r\n                            name=\"selectVessel\"\r\n                            options={state.ListOfVessels}\r\n                            label=\"Vessel Name\"\r\n                          />\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customSelect\"\r\n                            name=\"selectOriginPort\"\r\n                            options={state.ListOfOriginPorts}\r\n                            label=\"Origin Port Name\"\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customSelect\"\r\n                            name=\"selectNextPort\"\r\n                            options={state.ListOfNextPorts}\r\n                            label=\"Next Port Name\"\r\n                          />\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customSelect\"\r\n                            name=\"selectPreviousPort\"\r\n                            options={state.ListOfPreviousPorts}\r\n                            label=\"Previous Port Name\"\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customSelect\"\r\n                            name=\"selectAgent\"\r\n                            options={state.ListOfAgents}\r\n                            label=\"Agent Name\"\r\n                          />\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customSelect\"\r\n                            name=\"selectOwner\"\r\n                            options={state.ListOfOwners}\r\n                            label=\"Owner Name\"\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"inputMaskDebounce\"\r\n                            name=\"incomingVoyageNo\"\r\n                            className=\"ltr\"\r\n                            type=\"text\"\r\n                            label=\"Incoming Voyage No\"\r\n                          />\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"inputMaskDebounce\"\r\n                            type=\"text\"\r\n                            name=\"outgoingVoyageNo\"\r\n                            className=\"ltr\"\r\n                            label=\"Outgoing Voyage No\"\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customDateTimePicker\"\r\n                            name=\"eta\"\r\n                            locale=\"en\"\r\n                            label=\"Estimated Time Arrival\"\r\n                            placeholder=\"Select Enter Date\"\r\n                          />\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customDateTimePicker\"\r\n                            name=\"ata\"\r\n                            label=\"Actual Time Arrival\"\r\n                            placeholder=\"Select Enter Date\"\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customDateTimePicker\"\r\n                            name=\"etd\"\r\n                            label=\"Estimated Time Departure\"\r\n                            placeholder=\"Select Enter Date\"\r\n                          />\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                          <FormikControl\r\n                            control=\"customDateTimePicker\"\r\n                            name=\"atd\"\r\n                            label=\"Actual Time Departure\"\r\n                            placeholder=\"Select Enter Date\"\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col\r\n                          md=\"4\"\r\n                          style={{\r\n                            justifyContent: \"right\",\r\n                            direction: \"rtl\",\r\n                            display: \"flex\",\r\n                          }}\r\n                        >\r\n                          <FormikControl\r\n                            control=\"customSwitch\"\r\n                            name=\"voyageStatus\"\r\n                            label=\"Voyage Status\"\r\n                            unCheckedChildren=\"close\"\r\n                            checkedChildren=\"open\"\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                    </div>\r\n                    <div className=\"form-actions center\">\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        className=\"mr-1\"\r\n                        disabled={!formik.isValid}\r\n                      >\r\n                        <CheckSquare size={16} color=\"#FFF\" /> Save\r\n                      </Button>\r\n                      <Button\r\n                        color=\"warning\"\r\n                        type=\"button\"\r\n                        onClick={handleCancelCreateVoyage}\r\n                      >\r\n                        <X size={16} color=\"#FFF\" /> Cancel\r\n                      </Button>\r\n                    </div>\r\n                  </Form>\r\n                </React.Fragment>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </ModalBody>\r\n      </Modal>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default VoyagesPage;\r\n","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\billing\\garbage-collection\\garbageCollectionInvoiceList.jsx",["444","445","446","447"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Button,\r\n  FormGroup,\r\n  Row,\r\n  Col,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n} from \"reactstrap\";\r\nimport { FormatNumber } from '../../../../utility/tools';\r\nimport { ShoppingBag, Printer } from \"react-feather\";\r\nimport { Table, Tag, Space } from \"antd\"; import { toast } from \"react-toastify\";\r\nimport antdClass from \"antd/dist/antd.css\";\r\nimport antdClass2 from \"../../../../assets/css/vendors/customAntdTable.css\";\r\nimport style from './style/style.css'\r\n\r\nimport * as  gcs from '../../../../services/garbageCollectionService';\r\n\r\ntoast.configure({ bodyClassName: \"customFont\" });\r\n\r\n//#region INITIAL VALUES ---------------------------------------------------\r\n\r\nconst GarbageCollectionListPage = (props) => {\r\n\r\n\r\n  const [state, setState] = useState({\r\n    PrintModal: false,\r\n    CurrentBill: {},\r\n    ListOfBills: []\r\n  });\r\n  useEffect(() => {\r\n    (async function GetBills() {\r\n      let result = await gcs.GetAllBills();\r\n      if (result.data.result) {\r\n        setState((ps) => ({ ...ps, ListOfBills: result.data.data.map(item => { return { ...item, key: item.GarbageCollectionInvoiceId } }) }));\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const handlePrintInvoice = (record) => {\r\n    \r\n    console.log(\"handleEditVessel -> record\", record)\r\n    setState(ps => ({ ...ps, CurrentBill: record }))\r\n    PrintToggle();\r\n  }\r\n\r\n  const handleSendToPrinter = async (record) => {\r\n  let result = (await gcs.GetAllBills(record)).data.data[0]\r\n  result.billType = 'GarbageCollection';\r\n  return props.history.push('/billing/garbage-collection/Invoice-Print', { data: result });\r\n  }\r\n\r\n  const PrintToggle = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      PrintModal: !state.PrintModal,\r\n    }));\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Invoice-no\",\r\n      dataIndex: \"InvoiceNo\",\r\n      key: \"InvoiceNo\",\r\n      render: p => (\r\n        <Tag>{\r\n          p\r\n        }</Tag>\r\n      )\r\n    },\r\n    {\r\n      title: \"Voyage / Vessel\",\r\n      dataIndex: \"VoyageVessel\",\r\n      key: \"VoyageVessel\",\r\n    },\r\n    {\r\n      title: \"Dwell\",\r\n      dataIndex: \"DwellDate\",\r\n      key: \"DwellDate\",\r\n      render: p => (\r\n        <span>{\r\n          p + ' hour(s)'\r\n        }</span>\r\n      )\r\n    },\r\n    {\r\n      title: \"Price ($)\",\r\n      dataIndex: \"PriceD\",\r\n      key: \"PriceD\"\r\n    },\r\n    {\r\n      title: \"Price (IRR)\",\r\n      dataIndex: \"PriceR\",\r\n      key: \"PriceR\",\r\n    },\r\n    {\r\n      title: \"Invoice date\",\r\n      dataIndex: \"InvoiceDate\",\r\n      key: \"InvoiceDate\"\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      dataIndex: \"Status\",\r\n      key: \"Status\"\r\n    },\r\n    {\r\n      title: \"Print\",\r\n      key: \"action\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button\r\n            className=\"btn-warning mt-1\"\r\n            size=\"sm\"\r\n            onClick={() => handlePrintInvoice(record)}\r\n          >\r\n            <Printer size={16} />\r\n          </Button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <React.Fragment>\r\n      <Row className=\"row-eq-height\">\r\n        <Col sm=\"12\" md=\"12\">\r\n          <Card>\r\n            <CardBody>  <div className=\"form-body\">\r\n              <Row>\r\n                <Col md=\"9\">\r\n                  <h4 className=\"form-section\">\r\n                    <ShoppingBag size={20} color=\"#212529\" /> Garbage collection invoices\r\n                        </h4>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col md=\"12\">\r\n                  <FormGroup>\r\n                    <Table\r\n                      columns={columns}\r\n                      dataSource={state.ListOfBills}\r\n                      pagination={{ position: [\"bottomCenter\"] }}\r\n                      scroll={{ x: \"max-content\", y: 200 }}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n\r\n        <Modal\r\n          isOpen={state.PrintModal}\r\n          toggle={PrintToggle}\r\n          className={props.className}\r\n          backdrop=\"static\"\r\n        >\r\n          <ModalHeader toggle={PrintToggle}>\r\n            Print invoice --- {state.CurrentBill.InvoiceNo}\r\n          </ModalHeader>  \r\n          <ModalBody>\r\n            <div className=\"row invoiceItem\">\r\n              <div className=\"col\">Voyage / Vessel: <b>{state.CurrentBill.VoyageVessel}</b> </div>\r\n            </div>\r\n            <div className=\"row invoiceItem\">\r\n              <div className=\"col-6\">Invoice date: <b>{state.CurrentBill.InvoiceDate}</b></div>\r\n              <div className=\"col-6\">Status: <b>{state.CurrentBill.Status}</b> </div>\r\n            </div>\r\n            <div className=\"row invoiceItem\">\r\n              <div className=\"col-6\">Dwell: <b>{state.CurrentBill.DwellDate}</b></div>\r\n              <div className=\"col-6\">Rate: <b>{state.CurrentBill.Rate}</b> </div>\r\n            </div>\r\n\r\n            <div className=\"row invoiceItem\">\r\n              <div className=\"col-6\"><Tag color='geekblue'>Price ($): <b>{state.CurrentBill.PriceD}</b></Tag></div>\r\n              <div className=\"col-6\"><Tag color='geekblue'>Price (IRR): <b>{state.CurrentBill.PriceR} </b></Tag></div>\r\n            </div>\r\n            <Button\r\n              className=\"btn-success mt-1\"\r\n              size=\"sm\"\r\n            onClick={() => handleSendToPrinter(state.CurrentBill.GarbageCollectionInvoiceId)}\r\n            >\r\n              <Printer size={16} /> Print\r\n          </Button>\r\n          </ModalBody>\r\n        </Modal>\r\n\r\n      </Row>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default GarbageCollectionListPage;","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\billing\\garbage-collection\\garbageCollectionBillPage.jsx",["448","449","450","451","452","453"],"import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col } from \"reactstrap\";\r\nimport { SetValueLabel, FormatNumber } from '../../../../utility/tools'\r\nimport { Tag } from 'antd';\r\nimport { Formik, Form } from \"formik\";\r\nimport { Printer } from \"react-feather\";\r\nimport { toast } from \"react-toastify\";\r\nimport FormikControl from \"../../../../components/common/formik/FormikControl\";\r\n\r\nimport style from './style/style.css'\r\nimport * as  gcs from '../../../../services/garbageCollectionService';\r\nimport * as  vs from '../../../../services/voyageService';\r\nimport url from '../../../../urls.json'\r\nimport { propTypes } from \"react-country-flag\";\r\n\r\ntoast.configure({ bodyClassName: \"customFont\" });\r\n\r\nconst initialValues = {\r\n    ListOfVoyages: [],\r\n    voyageData: {},\r\n    issuedBill: {}\r\n}\r\n\r\nconst GarbageCollectionBillPage = (props) => {\r\n\r\n    const [state, setState] = useState({\r\n        ListOfVoyages: [],\r\n        voyageData: {},\r\n        issuedBill: {}\r\n    });\r\n\r\n    useEffect(() => {\r\n        (async function fetchAllTariffs() {\r\n            const response = await vs.GetLast10Voyages();\r\n            if (response.data.result) {\r\n                let temp = SetValueLabel(response.data.data, 'VoyageId', 'VoyageVessel');\r\n                setState((prevState) => ({ ...prevState, ListOfVoyages: temp }));\r\n            }\r\n            else\r\n                toast.error(response.data.data[0]);\r\n        })();\r\n    }, [])\r\n\r\n    const handleSelectedVoyageChanged = async (param) => {\r\n        await FireUp(param.value);\r\n    }\r\n\r\n    const handleInvoicePrint = async () => {\r\n        console.log(\"🚀 ~ file: garbageCollectionBillPage.jsx ~ line 50 ~ handleInvoicePrint ~ result\")\r\n        let result = (await gcs.GetAllBills(state.voyageData.gcInvoiceId)).data.data[0]\r\n        result.billType = 'GarbageCollection';\r\n        return props.history.push('/billing/garbage-collection/Invoice-Print', { data: result });\r\n    }\r\n\r\n    const handleInvoiceClicked = async (isPreInvoice) => {\r\n        try {\r\n            let result = await gcs.Calculate(voyageData.VoyageId, isPreInvoice)\r\n            console.log(\"handleInvoiceClicked -> invoice\", result)\r\n            if (result.data.result) {\r\n                let invoice = result.data.data[0];\r\n                if (!isPreInvoice) {\r\n                    toast.success(\r\n                        <div>\r\n                            <p>Invoice issued successfully</p>\r\n                            <p>Invoice-No: {invoice.invoiceNo}</p>\r\n                        </div>);\r\n                    await FireUp(voyageData.VoyageId);\r\n                }\r\n                else\r\n                    toast.success(\r\n                        <div>\r\n                            <p>Preinvoice issued successfully</p>\r\n                            <p>Price: {FormatNumber(invoice.priceD)}$, {FormatNumber(invoice.priceR)}Rial</p>\r\n                        </div>);\r\n            }\r\n\r\n        }\r\n        catch (ex) {\r\n            toast.error(ex.message);\r\n        }  \r\n    }\r\n\r\n    const FireUp = async (voyageId) => {\r\n        let response = await vs.getVoyageDetail(voyageId);\r\n        if (response.data.result)\r\n            setState(ps => ({ ...ps, voyageData: response.data.data[0] }))\r\n        else\r\n            toast.error(response.data.data[0]);\r\n    }\r\n\r\n    let { voyageData, ListOfVoyages } = state;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Formik\r\n                initialValues={initialValues}\r\n            >\r\n                {\r\n                    () => {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Form className='custom-background'>\r\n                                    <div className=\"form-body\">\r\n                                        <Row>\r\n                                            <Col md=\"6\">\r\n                                                <FormikControl\r\n                                                    control=\"customSelect\"\r\n                                                    name=\"selectTariff\"\r\n                                                    options={ListOfVoyages ?? []}\r\n                                                    label=\"Select voyage\"\r\n                                                    onSelectedChanged={\r\n                                                        handleSelectedVoyageChanged\r\n                                                    }\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </div>\r\n\r\n                                    <div className=\"row details\">\r\n                                        <div className=\"col-6\">Voyage/vessel: {voyageData.VoyageVessel}</div>\r\n                                        <div className=\"col-6\">Voyage status: <Tag color={voyageData.Status == 'close' ? 'red' : 'green'}>{voyageData.Status}</Tag>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row details\">\r\n                                        <div className=\"col-6\">Voyage-no (in): {voyageData.VoyageNoIn}</div>\r\n                                        <div className=\"col-6\">Voyage-no (out): {voyageData.VoyageNoOut}</div>\r\n                                    </div>\r\n                                    <hr />\r\n                                    <div className=\"row details\">\r\n                                        <div className=\"col-4\">Nationality: {voyageData.Nationality}</div>\r\n                                        <div className=\"col-4\">Flag: {voyageData.Flag}</div>\r\n                                        <div className=\"col-4\">Call-sign: {voyageData.CallSign}</div>\r\n                                    </div>\r\n                                    <div className=\"row details\">\r\n                                        <div className=\"col-4\">Origin port: {voyageData.OriginPort}</div>\r\n                                        <div className=\"col-4\">Previous port: {voyageData.PreviousPort}</div>\r\n                                        <div className=\"col-4\">Next port: {voyageData.NextPort}</div>\r\n                                    </div>\r\n                                    <div className=\"row details\">\r\n                                        <div className=\"col-4\">Vessel type: {voyageData.VesselType}</div>\r\n                                        <div className=\"col-4\">Vessel length: {voyageData.VesselLength}</div>\r\n                                        <div className=\"col-4\">Gross tonage: {voyageData.GrossTonage}</div>\r\n                                        <div className=\"col-4\">#Bays: {voyageData.NumOfBays}</div>\r\n                                        <div className=\"col-4\">#ActiveCrane: {voyageData.ActiveCraneQty}</div>\r\n                                    </div>\r\n                                    <hr />\r\n                                    <div className=\"row details\">\r\n                                        <div className=\"col-3\">Estimated arrival time: {voyageData.ETA}</div>\r\n                                        <div className=\"col-3\">Estimated departure time: {voyageData.ETD}</div>\r\n                                        <div className=\"col-3\">Actual arrival time: {voyageData.ATA}</div>\r\n                                        <div className=\"col-3\">Actual departure time: {voyageData.ATD}</div>\r\n                                    </div>\r\n\r\n                                    <hr hidden={voyageData.gcInvoiceNo == null} />\r\n                                    <div hidden={voyageData.gcInvoiceNo == null} className=\"row details\">\r\n                                        <div className=\"col-3\">Invoice-no: {voyageData.gcInvoiceNo}</div>\r\n                                        <div className=\"col-3\">Invoice Date: {voyageData.gcInvoiceDate}</div>\r\n                                        <div className=\"col-3\">Price($): {voyageData.gcPriceD}</div>\r\n                                        <div className=\"col-3\">Price(R): {voyageData.gcPriceR}</div>\r\n                                    </div>\r\n                                    <hr />\r\n\r\n                                    <div hidden={!voyageData.VoyageId} className=\"row\">\r\n                                        <button disabled={voyageData.Status == 'open' || voyageData.gcInvoiceNo != null} className=\"btn btn-primary ml-3\" onClick={() => handleInvoiceClicked(false)}>Invoice</button>\r\n                                        <button disabled={voyageData.Status == 'open' || voyageData.gcInvoiceNo != null} className=\"btn btn-secondary ml-1\" onClick={() => handleInvoiceClicked(true)}>Pre invoice</button>\r\n                                        <button type='button' disabled={voyageData.gcInvoiceNo == null} className=\"btn btn-secondary ml-1\" onClick={() => handleInvoicePrint()}> <Printer size={16} /> Print</button>\r\n                                    </div>\r\n                                </Form>\r\n                            </React.Fragment>\r\n                        )\r\n                    }}\r\n\r\n            </Formik>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default GarbageCollectionBillPage;","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\billing\\vessel-stoppage\\vessel-stoppageBillPage.jsx",["454","455","456","457"],"import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col } from \"reactstrap\";\r\nimport { SetValueLabel, FormatNumber } from '../../../../utility/tools'\r\nimport { Tag } from 'antd';\r\nimport { Formik, Form } from \"formik\";\r\nimport { toast } from \"react-toastify\";\r\nimport FormikControl from \"../../../../components/common/formik/FormikControl\";\r\n\r\nimport style from './style/style.css'\r\nimport * as  vss from '../../../../services/vesselStoppageService';\r\nimport * as  vs from '../../../../services/voyageService';\r\n\r\ntoast.configure({ bodyClassName: \"customFont\" });\r\n\r\nconst initialValues = {\r\n    ListOfVoyages: [],\r\n    voyageData: {},\r\n    issuedBill: {}\r\n}\r\n\r\nconst VesselStoppagePage = (props) => {\r\n\r\n    const [state, setState] = useState({\r\n        ListOfVoyages: [],\r\n        voyageData: {},\r\n        issuedBill: {}\r\n    });\r\n\r\n    useEffect(() => {\r\n        (async function fetchAllTariffs() {\r\n            const response = await vs.GetLast10Voyages();\r\n            if (response.data.result) {\r\n                let temp = SetValueLabel(response.data.data, 'VoyageId', 'VoyageVessel');\r\n                setState((prevState) => ({ ...prevState, ListOfVoyages: temp }));\r\n            }\r\n            else\r\n                toast.error(response.data.data[0]);\r\n        })();\r\n    }, [])\r\n\r\n    const handleSelectedVoyageChanged = async (param) => {\r\n        await FireUp(param.value);\r\n    }\r\n\r\n    const handleInvoicePrint = async () => {\r\n        let result = (await vss.GetAllBills(state.voyageData.vsInvoiceId)).data.data[0]\r\n        result.billType = 'Vessel stoppage';\r\n        return props.history.push('/billing/garbage-collection/Invoice-Print', { data: result });\r\n    }\r\n\r\n    const handleInvoiceClicked = async (isPreInvoice) => {\r\n        try {\r\n            let result = await vss.Calculate(voyageData.VoyageId, isPreInvoice)\r\n            if (result.data.result) {\r\n                let invoice = result.data.data[0];\r\n                if (!isPreInvoice) {\r\n                    toast.success(\r\n                        <div>\r\n                            <p>Invoice issued successfully</p>\r\n                            <p>Invoice-No: {invoice.invoiceNo}</p>\r\n                        </div>);\r\n                    await FireUp(voyageData.VoyageId);\r\n                }\r\n                else\r\n                    toast.success(\r\n                        <div>\r\n                            <p>Preinvoice issued successfully</p>\r\n                            <p>Price: {FormatNumber(invoice.priceD)}$, {FormatNumber(invoice.priceR)}Rial</p>\r\n                        </div>);\r\n            }\r\n\r\n        }\r\n        catch (ex) {\r\n            toast.error(ex.message);\r\n        }\r\n    }\r\n\r\n    const FireUp = async (voyageId) => {\r\n        let response = await vs.getVoyageDetail(voyageId);\r\n        if (response.data.result)\r\n            setState(ps => ({ ...ps, voyageData: response.data.data[0] }))\r\n        else\r\n            toast.error(response.data.data[0]);\r\n    }\r\n\r\n    let { voyageData, ListOfVoyages } = state;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Formik\r\n                initialValues={initialValues}\r\n            >\r\n                {\r\n                    () => {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Form className='custom-background'>\r\n                                    <div className=\"form-body\">\r\n                                        <Row>\r\n                                            <Col md=\"6\">\r\n                                                <FormikControl\r\n                                                    control=\"customSelect\"\r\n                                                    name=\"selectTariff\"\r\n                                                    options={ListOfVoyages ?? []}\r\n                                                    label=\"Select voyage\"\r\n                                                    onSelectedChanged={\r\n                                                        handleSelectedVoyageChanged\r\n                                                    }\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </div>\r\n                                    <div className=\"row details\">\r\n                                        <div className=\"col-6\">Voyage/vessel: {voyageData.VoyageVessel}</div>\r\n                                        <div className=\"col-6\">Voyage status: <Tag color={voyageData.Status == 'close' ? 'red' : 'green'}>{voyageData.Status}</Tag>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row details\">\r\n                                        <div className=\"col-6\">Voyage-no (in): {voyageData.VoyageNoIn}</div>\r\n                                        <div className=\"col-6\">Voyage-no (out): {voyageData.VoyageNoOut}</div>\r\n                                    </div>\r\n                                    <hr />\r\n                                    <div className=\"row details\">\r\n                                        <div className=\"col-4\">Nationality: {voyageData.Nationality}</div>\r\n                                        <div className=\"col-4\">Flag: {voyageData.Flag}</div>\r\n                                        <div className=\"col-4\">Call-sign: {voyageData.CallSign}</div>\r\n                                    </div>\r\n                                    <div className=\"row details\">\r\n                                        <div className=\"col-4\">Origin port: {voyageData.OriginPort}</div>\r\n                                        <div className=\"col-4\">Previous port: {voyageData.PreviousPort}</div>\r\n                                        <div className=\"col-4\">Next port: {voyageData.NextPort}</div>\r\n                                    </div>\r\n                                    <div className=\"row details\">\r\n                                        <div className=\"col-4\">Vessel type: {voyageData.VesselType}</div>\r\n                                        <div className=\"col-4\">Vessel length: {voyageData.VesselLength}</div>\r\n                                        <div className=\"col-4\">Gross tonage: {voyageData.GrossTonage}</div>\r\n                                        <div className=\"col-4\">#Bays: {voyageData.NumOfBays}</div>\r\n                                        <div className=\"col-4\">#ActiveCrane: {voyageData.ActiveCraneQty}</div>\r\n                                    </div>\r\n                                    <hr />\r\n                                    <div className=\"row details\">\r\n                                        <div className=\"col-3\">Estimated arrival time: {voyageData.ETA}</div>\r\n                                        <div className=\"col-3\">Estimated departure time: {voyageData.ETD}</div>\r\n                                        <div className=\"col-3\">Actual arrival time: {voyageData.ATA}</div>\r\n                                        <div className=\"col-3\">Actual departure time: {voyageData.ATD}</div>\r\n                                    </div>\r\n\r\n                                    <hr hidden={voyageData.vsInvoiceNo == null} />\r\n                                    <div hidden={voyageData.vsInvoiceNo == null} className=\"row details\">\r\n                                        <div className=\"col-3\">Invoice-no: {voyageData.vsInvoiceNo}</div>\r\n                                        <div className=\"col-3\">Invoice Date: {voyageData.vsInvoiceDate}</div>\r\n                                        <div className=\"col-3\">Price($): {voyageData.vsPriceD}</div>\r\n                                        <div className=\"col-3\">Price(R): {voyageData.vsPriceR}</div>\r\n                                    </div>\r\n                                    <hr />\r\n\r\n                                    <div hidden={!voyageData.VoyageId} className=\"row\">\r\n                                        <button disabled={voyageData.Status == 'OPEN' || voyageData.vsInvoiceNo != null} className=\"btn btn-primary ml-3\" onClick={() => handleInvoiceClicked(false)}>Invoice</button>\r\n                                        <button disabled={voyageData.Status == 'OPEN' || voyageData.vsInvoiceNo != null} className=\"btn btn-secondary ml-1\" onClick={() => handleInvoiceClicked(true)}>Pre invoice</button>\r\n                                        <button disabled={voyageData.vsInvoiceNo == null} className=\"btn btn-secondary ml-1\" onClick={() => handleInvoicePrint()}>Print</button>\r\n                                    </div>\r\n\r\n                                </Form>\r\n                            </React.Fragment>\r\n                        )\r\n                    }}\r\n\r\n            </Formik>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default VesselStoppagePage;","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\billing\\garbage-collection\\garbageCollectionTariffPage.jsx",["458","459"],"import React, { useState, useEffect } from \"react\";\r\nimport { Card, CardBody, FormGroup, Row, Col } from \"reactstrap\";\r\nimport { ShoppingBag } from \"react-feather\";\r\nimport { Table, Tag } from 'antd';\r\nimport { Formik, Form } from \"formik\";\r\nimport { toast } from \"react-toastify\";\r\nimport { SetValueLabel } from '../../../../utility/tools'\r\n\r\n\r\nimport FormikControl from \"../../../../components/common/formik/FormikControl\";\r\n\r\nimport * as  gcs from '../../../../services/garbageCollectionService';\r\n\r\ntoast.configure({ bodyClassName: \"customFont\" });\r\n\r\n//#region INITIAL VALUES ---------------------------------------------------\r\n\r\nconst initialValues = {\r\n    selectTariff: {}\r\n}\r\n\r\nconst GarbageCollectionTariffPage = () => {\r\n\r\n    const [state, setState] = useState({\r\n        ListOfTariffs: [],\r\n        ListOfTariffDetails: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        (async function fetchAllTariffs() {\r\n            const response = await gcs.GetAllTariffs();\r\n            if (response.data.result) {\r\n                let temp = SetValueLabel(response.data.data, 'GarbageCollectionTariffId', 'Description')\r\n\r\n                setState((prevState) => ({ ...prevState, ListOfTariffs: temp }));\r\n            }\r\n            else {\r\n                toast.error(response.data.data[0]);\r\n            }\r\n        })();\r\n    }, [])\r\n\r\n    const handleSelectedTariffChanged = async () => {\r\n        let tariff = await gcs.GetTariffDetails(1);\r\n        tariff = tariff.data.data.map(item => {\r\n            return {\r\n                ...item,\r\n                key: item.GarbageCollectionTariffDetailId\r\n            }\r\n        })\r\n        console.log('tariff', tariff)\r\n        setState((prevState) => ({ ...prevState, ListOfTariffDetails: tariff }));\r\n\r\n    }\r\n\r\n    const RenderColor = (value) => {\r\n        switch (value) {\r\n            case 1: return 'green';\r\n            case 2: return 'green';\r\n            case 4: return 'orange';\r\n            case 10: return 'orange';\r\n            case 40: return 'red';\r\n            case 100: return \"red\";\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Weight',\r\n            dataIndex: 'GrossWeight',\r\n            key: 'GrossWeight'\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'Price',\r\n            key: 'Price',\r\n            render: p => (\r\n                <Tag color={RenderColor(p)}>{\r\n                    p\r\n                }</Tag>\r\n            )\r\n        }]\r\n    return (\r\n        <React.Fragment>\r\n            <Formik\r\n                initialValues={initialValues}\r\n            >\r\n                {\r\n                    () => {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Form>\r\n                                    <div className=\"form-body\">\r\n                                        <Row>\r\n                                            <Col md=\"6\">\r\n                                                <FormikControl\r\n                                                    control=\"customSelect\"\r\n                                                    name=\"selectTariff\"\r\n                                                    options={state.ListOfTariffs ?? []}\r\n                                                    label=\"Garbage collections tariffs\"\r\n                                                    onSelectedChanged={\r\n                                                        handleSelectedTariffChanged\r\n                                                    }\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </div>\r\n                                </Form>\r\n                                {state.ListOfTariffDetails.length == 0\r\n                                    ? <label>Select a tariff from list above</label>\r\n                                    : <Row className=\"row-eq-height\">\r\n                                        <Col sm=\"12\" md=\"6\">\r\n                                            <Card>\r\n                                                <CardBody>\r\n                                                    <div className=\"form-body\">\r\n                                                        <Row>\r\n                                                            <Col md='9'>\r\n\r\n                                                                <h4 className=\"form-section\">\r\n                                                                    <ShoppingBag size={20} color=\"#212529\" /> Tariff details\r\n                                    </h4>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        <Row>\r\n                                                            <Col md=\"12\">\r\n                                                                <FormGroup>\r\n                                                                    <Table\r\n                                                                        columns={columns}\r\n                                                                        dataSource={state.ListOfTariffDetails}\r\n                                                                        pagination={{ position: [\"bottomCenter\"] }}\r\n                                                                    />\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        </Row>\r\n\r\n                                                    </div>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                }\r\n                            </React.Fragment>\r\n                        )\r\n                    }\r\n                }\r\n            </Formik>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default GarbageCollectionTariffPage;","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\billing\\vessel-stoppage\\vessel-stoppageInvoiceList.jsx",["460","461","462"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Button,\r\n  FormGroup,\r\n  Row,\r\n  Col,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n} from \"reactstrap\";\r\nimport { ShoppingBag, Printer } from \"react-feather\";\r\nimport { Table, Tag, Space } from \"antd\"; import { toast } from \"react-toastify\";\r\nimport antdClass from \"antd/dist/antd.css\";\r\nimport antdClass2 from \"../../../../assets/css/vendors/customAntdTable.css\";\r\nimport style from './style/style.css'\r\n\r\nimport * as  vss from '../../../../services/vesselStoppageService';\r\n\r\ntoast.configure({ bodyClassName: \"customFont\" });\r\n\r\n//#region INITIAL VALUES ---------------------------------------------------\r\n\r\nconst GarbageCollectionListPage = (props) => {\r\n\r\n\r\n  const [state, setState] = useState({\r\n    PrintModal: false,\r\n    CurrentBill: {},\r\n    ListOfBills: []\r\n  });\r\n  useEffect(() => {\r\n    (async function GetBills() {\r\n      let result = await vss.GetAllBills();\r\n      if (result.data.result) {\r\n        setState((ps) => ({ ...ps, ListOfBills: result.data.data.map(item => { return { ...item, key: item.VesselStopageInvoiceId } }) }));\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const handlePrintInvoice = (record) => {\r\n    console.log(\"handleEditVessel -> record\", record)\r\n    setState(ps => ({ ...ps, CurrentBill: record }))\r\n    PrintToggle();\r\n  }\r\n\r\n\r\n  const handleSendToPrinter= async(record)=>{\r\n    let result = (await vss.GetAllBills(record)).data.data[0]\r\n    result.billType = 'Vessel stoppage';\r\n    return props.history.push('/billing/garbage-collection/Invoice-Print', { data: result });\r\n  }\r\n\r\n  const PrintToggle = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      PrintModal: !state.PrintModal,\r\n    }));\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Invoice-no\",\r\n      dataIndex: \"InvoiceNo\",\r\n      key: \"InvoiceNo\",\r\n      render: p => (\r\n        <Tag>{\r\n          p\r\n        }</Tag>\r\n      )\r\n    },\r\n    {\r\n      title: \"Voyage / Vessel\",\r\n      dataIndex: \"VoyageVessel\",\r\n      key: \"VoyageVessel\",\r\n    },\r\n    {\r\n      title: \"Dwell\",\r\n      dataIndex: \"DwellHour\",\r\n      key: \"DwellHour\",\r\n      render: p => (\r\n        <span>{\r\n          p + ' hour(s)'\r\n        }</span>\r\n      )\r\n    },\r\n    {\r\n      title: \"Price ($)\",\r\n      dataIndex: \"PriceD\",\r\n      key: \"PriceD\"\r\n    },\r\n    {\r\n      title: \"Price (IRR)\",\r\n      dataIndex: \"PriceR\",\r\n      key: \"PriceR\",\r\n    },\r\n    {\r\n      title: \"Invoice date\",\r\n      dataIndex: \"InvoiceDate\",\r\n      key: \"InvoiceDate\"\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      dataIndex: \"Status\",\r\n      key: \"Status\"\r\n    },\r\n    {\r\n      title: \"Print\",\r\n      key: \"action\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button\r\n            className=\"btn-warning mt-1\"\r\n            size=\"sm\"\r\n            onClick={() => handlePrintInvoice(record)}\r\n          >\r\n            <Printer size={16} />\r\n          </Button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <React.Fragment>\r\n      <Row className=\"row-eq-height\">\r\n        <Col sm=\"12\" md=\"12\">\r\n          <Card>\r\n            <CardBody>  <div className=\"form-body\">\r\n              <Row>\r\n                <Col md=\"9\">\r\n                  <h4 className=\"form-section\">\r\n                    <ShoppingBag size={20} color=\"#212529\" /> Garbage collection invoices\r\n                        </h4>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col md=\"12\">\r\n                  <FormGroup>\r\n                    <Table\r\n                      columns={columns}\r\n                      dataSource={state.ListOfBills}\r\n                      pagination={{ position: [\"bottomCenter\"] }}\r\n                      scroll={{ x: \"max-content\", y: 200 }}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n\r\n        <Modal\r\n          isOpen={state.PrintModal}\r\n          toggle={PrintToggle}\r\n          className={props.className}\r\n          backdrop=\"static\"\r\n        >\r\n          <ModalHeader toggle={PrintToggle}>\r\n            Print invoice --- {state.CurrentBill.InvoiceNo}\r\n          </ModalHeader>  \r\n          <ModalBody>\r\n            <div className=\"row invoiceItem\">\r\n              <div className=\"col\">Voyage / Vessel: <b>{state.CurrentBill.VoyageVessel}</b> </div>\r\n            </div>\r\n            <div className=\"row invoiceItem\">\r\n              <div className=\"col-6\">Invoice date: <b>{state.CurrentBill.InvoiceDate}</b></div>\r\n              <div className=\"col-6\">Status: <b>{state.CurrentBill.Status}</b> </div>\r\n            </div>\r\n            <div className=\"row invoiceItem\">\r\n              <div className=\"col-6\">Dwell: <b>{state.CurrentBill.DwellHour}</b></div>\r\n              <div className=\"col-6\">Rate: <b>{state.CurrentBill.Rate}</b> </div>\r\n            </div>\r\n\r\n            <div className=\"row invoiceItem\">\r\n              <div className=\"col-6\"><Tag color='geekblue'>Price ($): <b>{state.CurrentBill.PriceD}</b></Tag></div>\r\n              <div className=\"col-6\"><Tag color='geekblue'>Price (IRR): <b>{state.CurrentBill.PriceR} </b></Tag></div>\r\n            </div>\r\n            <Button\r\n              className=\"btn-success mt-1\"\r\n              size=\"sm\"\r\n            onClick={() => handleSendToPrinter(state.CurrentBill.VesselStopageInvoiceId)}\r\n            >\r\n              <Printer size={16} /> Print\r\n          </Button>\r\n          </ModalBody>\r\n        </Modal>\r\n\r\n      </Row>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default GarbageCollectionListPage;","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\billing\\vessel-stoppage\\vessel-stoppageTariffPage.jsx",["463"],"import React, { useState, useEffect } from \"react\";\r\nimport { Card, CardBody, FormGroup, Row, Col } from \"reactstrap\";\r\nimport { ShoppingBag } from \"react-feather\";\r\nimport { Table, Tag } from 'antd';\r\nimport { Formik, Form } from \"formik\";\r\nimport { toast } from \"react-toastify\";\r\nimport { SetValueLabel } from '../../../../utility/tools'\r\n\r\n\r\nimport FormikControl from \"../../../../components/common/formik/FormikControl\";\r\n\r\nimport * as  vss from '../../../../services/vesselStoppageService';\r\n\r\ntoast.configure({ bodyClassName: \"customFont\" });\r\n\r\n//#region INITIAL VALUES ---------------------------------------------------\r\n\r\nconst initialValues = {\r\n    selectTariff: {}\r\n}\r\n\r\nconst VesselStoppageTariffPage = () => {\r\n\r\n    const [state, setState] = useState({\r\n        ListOfTariffs: [],\r\n        ListOfTariffDetails: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        (async function fetchAllTariffs() {\r\n            const response = await vss.GetAllTariffs();\r\n            if (response.data.result) {\r\n                let temp = SetValueLabel(response.data.data, 'VesselStoppageTariffId', 'Description')\r\n\r\n                setState((prevState) => ({ ...prevState, ListOfTariffs: temp }));\r\n            }\r\n            else {\r\n                toast.error(response.data.data[0]);\r\n            }\r\n        })();\r\n    }, [])\r\n\r\n    const handleSelectedTariffChanged = async () => {\r\n        let tariff = await vss.GetTariffDetails(1);\r\n        tariff = tariff.data.data.map(item => {\r\n            return {\r\n                ...item,\r\n                key: item.VesselStoppageTariffDetailId\r\n            }\r\n        })\r\n        console.log('tariff', tariff)\r\n        setState((prevState) => ({ ...prevState, ListOfTariffDetails: tariff }));\r\n\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Normal Hour',\r\n            dataIndex: 'NormalHour',\r\n            key: 'NormalHour',\r\n        },\r\n        {\r\n            title: 'Vessel Type',\r\n            dataIndex: 'VesselType',\r\n            key: 'VesselType'\r\n        },\r\n        {\r\n            title: 'Normal Price',\r\n            dataIndex: 'NormalPrice',\r\n            key: 'NormalPrice',\r\n            render: p => (\r\n                <Tag color={'green'}>{\r\n                    p + ' $'\r\n                }</Tag>\r\n            )\r\n        },\r\n        {\r\n            title: 'Extra Price',\r\n            dataIndex: 'ExtraPrice',\r\n            key: 'ExtraPrice',\r\n            render: p => (\r\n                <Tag color={'red'}>{\r\n                    p + ' $'\r\n                }</Tag>\r\n            )\r\n        }]\r\n    return (\r\n        <React.Fragment>\r\n            <Formik\r\n                initialValues={initialValues}\r\n            >\r\n                {\r\n                    () => {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Form>\r\n                                    <div className=\"form-body\">\r\n                                        <Row>\r\n                                            <Col md=\"6\">\r\n                                                <FormikControl\r\n                                                    control=\"customSelect\"\r\n                                                    name=\"selectTariff\"\r\n                                                    options={state.ListOfTariffs ?? []}\r\n                                                    label=\"Vessel stoppage tariffs\"\r\n                                                    onSelectedChanged={\r\n                                                        handleSelectedTariffChanged\r\n                                                    }\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </div>\r\n                                </Form>\r\n                                {state.ListOfTariffDetails.length == 0\r\n                                    ? <label>Select a tariff from list above</label>\r\n                                    : <Row className=\"row-eq-height\">\r\n                                        <Col sm=\"12\" md=\"6\">\r\n                                            <Card>\r\n                                                <CardBody>\r\n                                                    <div className=\"form-body\">\r\n                                                        <Row>\r\n                                                            <Col md='9'>\r\n\r\n                                                                <h4 className=\"form-section\">\r\n                                                                    <ShoppingBag size={20} color=\"#212529\" /> Tariff details\r\n                                    </h4>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        <Row>\r\n                                                            <Col md=\"12\">\r\n                                                                <FormGroup>\r\n                                                                    <Table\r\n                                                                        columns={columns}\r\n                                                                        dataSource={state.ListOfTariffDetails}\r\n                                                                        pagination={{ position: [\"bottomCenter\"],pageSize:11 }}\r\n                                                                    />\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        </Row>\r\n\r\n                                                    </div>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                }\r\n                            </React.Fragment>\r\n                        )\r\n                    }\r\n                }\r\n            </Formik>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default VesselStoppageTariffPage;","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\billing\\reports\\invoicePrintPage.jsx",["464","465","466","467"],"\r\nimport React from \"react\";\r\nimport bootstrap from './style/bootstrap.min.css'\r\nimport style from './style/style.css'\r\nimport logo from './logo.jpg'\r\nimport { Button } from \"reactstrap\";\r\nclass Viewer extends React.Component {\r\n\r\n\r\n\r\n    render() {\r\n        let invoiceData = this.props.location.state.data;\r\n        console.log(\"🚀 ~ file: invoicePrintPage.jsx ~ line 13 ~ Viewer ~ render ~ invoiceData\", invoiceData)\r\n        return <React.Fragment>\r\n            <div className=\"container\">\r\n                <div id='print-area' className=\"col-md-12\">\r\n                    <div className=\"invoice\">\r\n                        <div className=\"invoice-company text-inverse f-w-600\">\r\n                            <img src={logo}></img>\r\n                            <span className=\"header\">SIMIN PARS.co</span>\r\n                        </div>\r\n                        <hr />\r\n                        <div className=\"invoice-header\">\r\n                            <div className=\"invoice-from\">\r\n                                <small>from</small>\r\n                                <address className=\"m-t-5 m-b-5\">\r\n                                    <strong className=\"text-inverse\">Simin pars.co</strong> <br />\r\n                                        Gandi st <br />\r\n                  Tehran-Iran <br />\r\n                                        Phone: (123) 456-7890 <br />\r\n                  Fax: (123) 456-7890\r\n               </address>\r\n                            </div>\r\n                            <div className=\"invoice-to\">\r\n                                <small>to</small>\r\n                                <address className=\"m-t-5 m-b-5\">\r\n                                    <strong className=\"text-inverse\">{invoiceData.ShippingLineName}</strong> <br />\r\n                                    {invoiceData.Address} <br />\r\n                  Phone: {invoiceData.Tel}\r\n                                </address>\r\n                            </div>\r\n                            <div className=\"invoice-date\">\r\n                                <small>Invoice Date</small>\r\n                                <div className=\"date text-inverse m-t-5\">{invoiceData.InvoiceDate}</div>\r\n                                <small>Invoice-no</small>\r\n                                <div className=\"invoice-detail\">\r\n                                    {invoiceData.InvoiceNo} <br />\r\n                                </div>\r\n                                <small>$Rate</small>\r\n                                <div className=\"invoice-detail\">\r\n                                    {invoiceData.Rate}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"invoice-detail col\">\r\n                                Vessel/voyage: {invoiceData.VoyageVessel}\r\n                            </div>\r\n                            <div className=\"invoice-detail col-3\">\r\n                                Actual arrival: {invoiceData.ATA}\r\n                            </div>\r\n                            <div className=\"invoice-detail col-3\">\r\n                                Actual leave: {invoiceData.ATD}\r\n                            </div> \r\n                            <div className=\"invoice-detail col-2\">\r\n                                Dwell: {invoiceData.DwellDate}h\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"invoice-content\">\r\n                            <div className=\"table-responsive\">\r\n                                <table className=\"table table-invoice\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>INVOICE DETAIL</th>\r\n                                            <th className=\"text-center\" width=\"10%\">TONAGE</th>\r\n                                            <th className=\"text-center\" width=\"10%\">DWELL</th>\r\n                                            <th className=\"text-center\" width=\"10%\">FEE</th>\r\n                                            <th className=\"text-right\" width=\"20%\">LINE TOTAL</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                <span className=\"text-inverse\">{invoiceData.billType}</span> <br />\r\n                                                <small>{invoiceData.VesselType}</small>\r\n                                            </td>\r\n                                            <td className=\"text-center\">{invoiceData.GrossTonage}T</td>\r\n                                            <td className=\"text-center\">{invoiceData.DwellDate}h</td>\r\n                                            <td className=\"text-center\">${invoiceData.Fee}</td>\r\n                                            <td className=\"text-right\">${invoiceData.PriceD}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <div className=\"invoice-price\">\r\n                                <div className=\"invoice-price-left\">\r\n                                    <div className=\"invoice-price-row\">\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"invoice-price-right\">\r\n                                    <small>TOTAL</small> <span className=\"f-w-600\">${invoiceData.PriceD}</span><br />\r\n                                    <span className=\"f-w-600\">IRR {invoiceData.PriceR}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"invoice-note\">\r\n                            * Make all cheques payable to SIMIN PARS <br />\r\n            * Payment is due within 30 days\r\n         </div>\r\n                    </div>\r\n                </div>\r\n            </div><br />\r\n\r\n        </React.Fragment>\r\n    }\r\n\r\n}\r\n\r\nexport default Viewer;","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\customizer\\sidebarCollapsed.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\customizer\\sidebarSize.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\customizer\\sidebarImageUrl.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\customizer\\sidebarImage.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\customizer\\sidebarBgColor.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\todoSearch.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\editTodo.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\todoVisibilityFilter.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\damage\\damageTypes.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\operator\\operatorTypes.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\voyage\\voyageTypes.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\common\\equipment\\equipmentTypes.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\authService.js",["468"],"import http from \"./httpService\";\r\nimport { toast } from \"react-toastify\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport * as CryptoJS from \"crypto-js\";\r\n\r\nimport { apiUrl, tokenHashKey } from \"../config.json\";\r\n\r\n\r\nconst apiEndpoint = apiUrl + \"/auth/authentication\";\r\nconst tokenKey = \"token\";\r\n\r\n\r\ntoast.configure({ bodyClassName: \"rtl\" });\r\n\r\nexport async function login(user) {\r\n  const { data } = await http.post(apiEndpoint, user);\r\n  //console.log(\"from authserv\", data)\r\n  if (data.result) {\r\n    const jwt = data.data[0].token;\r\n    localStorage.setItem(tokenKey, jwt);\r\n    return { result: true, message: null };\r\n  }\r\n  return { result: false, message: data.data[0] };\r\n}\r\n\r\nexport function logout() {\r\n  console.log('logoutttt')\r\n  localStorage.removeItem(tokenKey);\r\n}\r\n\r\nexport function getCurrentUser() {\r\n  try {\r\n    const jwt = CryptoJS.AES.decrypt(\r\n      localStorage.getItem(\"token\"),\r\n      tokenHashKey\r\n    ).toString(CryptoJS.enc.Utf8);\r\n    const decToken = jwtDecode(jwt);\r\n    // console.log('decode toke', decToken);\r\n    if (decToken.exp < Date.now() / 1000) {\r\n      toast.error(\"Your credential is expired, Please login again\");\r\n      logout();\r\n      return null;\r\n    }\r\n    return decToken;\r\n\r\n  } catch (ex) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function getJwt() {\r\n  return localStorage.getItem(tokenKey);\r\n}\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n  getJwt\r\n};\r\n","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\userType.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\shippingLineService.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\vesselService.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\user.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\voyageService.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\portServices.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\permission.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\vesselStoppageService.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\utility\\tools.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\loginLayout.jsx",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\views\\pages\\Tree.jsx",["469"],"import React, { Component } from 'react';\r\nimport { Row, Col } from \"reactstrap\";\r\nimport { Switch, Tag } from 'antd'\r\n\r\nconst colors = [\"magenta\", \"geekblue\", \"cyan\", \"volcano\", \"blue\", \"purple\"];\r\nconst indexes = [\"12\", \"12\", \"12\"];\r\nconst Tree = ({ items, depth = 0, onChangeTree, disabled, colorIndex = 0, sortIndex = 0 }) => {\r\n    if (!items || !items.length) {\r\n        return null\r\n    }\r\n\r\n    let selectedColor = colors[colorIndex % colors.length];\r\n    let selectedIndex = indexes[sortIndex % colors.length];\r\n    console.log(selectedColor)\r\n\r\n    return items.map(item => (\r\n        // <React.Fragment key={item.name}>\r\n        //     {/* Multiply the depth by a constant to create consistent spacing */}\r\n        //     <div style={{ paddingLeft: depth * 15 }}>{item.name}</div>\r\n        //     <Tree items={item.children} depth={depth + 1} />\r\n        // </React.Fragment>\r\n\r\n        <React.Fragment key={item.key}>\r\n            <Col md={`${selectedIndex}`} className=\"mb-1\">\r\n                <Row style={{ paddingLeft: depth * 15 }} >\r\n                    <Col md=\"6\">\r\n                        <Tag color={`${selectedColor}`}>{item.name}</Tag>\r\n                    </Col>\r\n                    <Col md=\"6\" style={{ justifyContent: \"right\", direction: \"ltr\", display: \"flex\" }} >\r\n                        {/* <span className=\"ml-1 pb-90\">{permission.isGranted ? 'Granted' : 'Not Granted'}</span> */}\r\n                        <Switch\r\n                            name={item.key}\r\n                            size=\"default\"\r\n                            // disabled={item.level !=0 && disabledParent}\r\n                            disabled={disabled}\r\n                            defaultChecked={item.isGranted}\r\n                            checkedChildren={item.isGranted ? `Granted` : \"\"}\r\n                            unCheckedChildren={!item.isGranted ? `Not Granted` : \"\"}\r\n                            onChange={(value) => onChangeTree(value, item.key)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Col>\r\n            <Tree items={item.child}\r\n                depth={depth + 1}\r\n                key={item.key + item.key}\r\n                onChangeTree={onChangeTree}\r\n                disabled={disabled || !item.isGranted}\r\n                colorIndex={colorIndex + 1}\r\n                sortIndex={sortIndex + 1}\r\n            />\r\n        </React.Fragment>\r\n    ))\r\n}\r\n\r\nexport default Tree;","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\FormikControl.jsx",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\todoActions.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\garbageCollectionService.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\httpService.js",["470","471"],"import axios from \"axios\";\nimport { toast } from 'react-toastify';\n\naxios.interceptors.response.use(res => {\n  //console.log('interceptor response', res.data.token);\n  if (res.status === 200 && res.data.token) {\n    //console.log('new token', res.data.token)\n    localStorage.setItem('token', res.data.token)\n  }\n\n  return Promise.resolve(res);\n})\n\naxios.interceptors.request.use(req => {\n  //console.log('set http jewt', localStorage.getItem('token'))\n  req.headers.common['x-auth-token'] = localStorage.getItem('token');\n  return req\n})\n\naxios.interceptors.response.use(null, error => {\n  // console.log('from http service', error.response)\n  const expectedError =\n    error.response &&\n    error.response.status >= 400 &&\n    error.response.status < 500;\n\n  //console.log(\"error\", error);\n  if (!expectedError) {\n    // status code 500\n    toast.error(\"خطا در برقراری ارتباط با سرور. لطفا با ادمین سایت تماس بگیرید\");\n    console.log(error.response, error); // eeno bayad log begirim\n    //toastr.error('Server Error','An Unexpected error occured!')\n  }\n\n  if (expectedError) {\n    switch (error.response.status) {\n\n      case 400:\n        toast.error('اطلاعات وارد شده صحیح نمی باشد');\n        break;\n      case 401:\n        toast.error('کاربری با مشخصات وارد شده یافت نشد');\n        break;\n      case 403:\n        toast.error('دسترسی غیر مجاز');\n        break;\n      case 404:\n        toast.error('سرویس مورد نظر یافت نشد');\n        break;\n    }\n  }\n\n  return Promise.reject(error);\n});\n\nexport function setJwt(jwt) {\n  //console.log('set http jewt',jwt)\n  //axios.defaults.headers.common['x-auth-token'] = jwt;\n}\n\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n  setJwt: setJwt\n};\n","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\templateConfig.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\countryService.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\services\\area.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\todoDetails.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\todo.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\mainLayout.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\logoutLayout.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\errorLayout.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\CustomCheckboxGroup.jsx",["472","473","474","475","476"],"import React from \"react\";\r\nimport { ErrorMessage, Field } from \"formik\";\r\nimport TextError from \"./TextError\";\r\nimport { FormGroup, Row } from \"reactstrap\";\r\nimport { Checkbox } from 'antd';\r\nimport antdClass from 'antd/dist/antd.css';\r\nimport antdClass2 from \"../../../assets/css/vendors/customAntdTable.css\";\r\n\r\nconst CheckboxGroup = (props) => {\r\n    const { label, name, options, disabled, defaultValue, className, ...rest } = props;\r\n    const classN = \"form-control \" + className;\r\n    return (\r\n        <FormGroup>\r\n            {/* <Row> */}\r\n            <Field name={name} {...rest} className={classN}>\r\n                {({ form, meta }) => {\r\n                    console.log(\"Field\", options);\r\n                    return (\r\n                        <div>\r\n                            <Checkbox.Group\r\n                                disabled={disabled}\r\n                                options={options}\r\n                                name={name}\r\n                                defaultValue={defaultValue}\r\n                                onChange={(checkedValues) => {\r\n                                    if (props.onSelectedChange)\r\n                                        props.onSelectedChange(checkedValues);\r\n                                    form.setFieldValue(name, checkedValues);\r\n                                }}\r\n                            />\r\n                            {meta.touched && meta.error ? (\r\n                                <div className=\"error\">{meta.error}</div>\r\n                            ) : null}\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Field>\r\n            {/* <ErrorMessage name={name} component={TextError} /> */}\r\n            {/* </Row> */}\r\n        </FormGroup>\r\n    );\r\n};\r\n\r\nexport default CheckboxGroup;\r\n","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\CustomSwitch.jsx",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\CustomDateTimePicker.jsx",["477","478","479","480","481","482","483"],"import React, { Component } from \"react\";\r\nimport { Button, ButtonGroup, Label, Row, Col, FormGroup } from \"reactstrap\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport _ from \"lodash\";\r\nimport DatePicker, { utils } from \"react-modern-calendar-datepicker\";\r\nimport InputMaskDebounce from \"./InputMaskDebounce\";\r\nimport { TimePicker } from \"antd\";\r\nimport moment from \"jalali-moment\";\r\nimport TextError from \"./TextError\";\r\n\r\nclass CustomDateTimePicker extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { selectedValue } = this.props;\r\n    console.log(\"props from \", this.props);\r\n    this.state = {\r\n      selectedDate: \"\",\r\n      selectedTime: \"\",\r\n    };\r\n    if (selectedValue != null && selectedValue !== \"\") {\r\n      const date = this.convertDateTo(selectedValue, \"fa\"); // 1392/6/31 23:59:59);\r\n      var formatedDate = {\r\n        year: parseInt(date[0]),\r\n        month: parseInt(date[1]),\r\n        day: parseInt(date[2]),\r\n      };\r\n      const time = moment(selectedValue, \"YYYY-M-D HH:mm:ss\")\r\n        .locale(\"fa\")\r\n        .format(\"HH:mm:ss\"); //23:59:59\r\n      this.state = {\r\n        selectedDate: formatedDate,\r\n        selectedTime: time,\r\n      };\r\n    }\r\n  }\r\n  convertDateTo = (date, locale) => {\r\n    switch (locale) {\r\n      case \"fa\":\r\n        let result = moment(date, \"YYYY-M-D HH:mm:ss\")\r\n          .locale(locale)\r\n          .format(\"YYYY/M/D\")\r\n          .split(\"/\"); // 1392/6/31);\r\n        return result;\r\n      case \"en\":\r\n        let result1 = moment.from(date, \"fa\", \"YYYY/M/D\").format(\"YYYY-M-D\"); // 2013-8-25 16:40:00\r\n        return result1;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  getMiladiDate = (value) => {\r\n    const formatedDate = `${value.year}/${value.month}/${value.day}`;\r\n    const miladiDate = this.convertDateTo(formatedDate, \"en\");\r\n    return miladiDate;\r\n  };\r\n  handleSelectedDateChanged = (value, form) => {\r\n    const miladiDate = this.getMiladiDate(value);\r\n    this.setState({\r\n      selectedDate: value,\r\n      selectedTime: this.state.selectedTime,\r\n    });\r\n    if (this.props.onSelectedChanged)\r\n      this.props.onSelectedChanged(miladiDate + \" \" + this.state.selectedTime);\r\n\r\n    form.setFieldValue(\r\n      this.props.name,\r\n      miladiDate + \" \" + this.state.selectedTime\r\n    );\r\n  };\r\n\r\n  handleSelectedTimeChanged = (TimeString, form) => {\r\n    this.setState({ ...this.state, selectedTime: TimeString });\r\n\r\n    const miladiDate = this.getMiladiDate(this.state.selectedDate);\r\n    if (this.props.onSelectedChanged)\r\n      this.props.onSelectedChanged(miladiDate + \" \" + TimeString);\r\n\r\n    form.setFieldValue(this.props.name, miladiDate + \" \" + TimeString);\r\n  };\r\n\r\n  render() {\r\n    const { label, name, placeholder } = this.props;\r\n    const minimumDate = {\r\n      year: 1398,\r\n      month: 12,\r\n      day: 29\r\n    };\r\n    const maximumDate = {\r\n      year: 1420,\r\n      month: 12,\r\n      day: 29\r\n    }\r\n    return (\r\n      <FormGroup>\r\n        {label !== null && label !== \"\" && <Label for={name}>{label}</Label>}\r\n        <Field name={name}>\r\n          {(fieldProps) => {\r\n            const { form, meta } = fieldProps;\r\n            // console.log(\"meta \", meta);\r\n            return (\r\n              <React.Fragment>\r\n                <Row>\r\n                  <Col md=\"6\" sm=\"6\" style={{ paddingRight: \"1px\" }}>\r\n                    <DatePicker\r\n                    minimumDate={minimumDate}\r\n                    maximumDate = {maximumDate}\r\n                  shouldHighlightWeekends\r\n                      wrapperClassName=\"form-control\"\r\n                      value={this.state.selectedDate}\r\n                      onChange={(value) =>\r\n                        this.handleSelectedDateChanged(value, form)\r\n                      }\r\n                      colorPrimary=\"rgb(57, 124, 182)\" // added this\r\n                      calendarClassName=\"custom-calendar\" // and this\r\n                      calendarTodayClassName=\"custom-today-day\" // also this\r\n                      locale=\"fa\"\r\n                      inputClassName=\"customSize\"\r\n                      inputPlaceholder={placeholder}\r\n                      shouldHighlightWeekends\r\n                    />\r\n                  </Col>\r\n                  <Col md=\"6\" sm=\"6\" style={{ padding: \"1px 15px 1px 1px\" }}>\r\n                    <TimePicker\r\n                      disabled={!this.state.selectedDate}\r\n                      value={\r\n                        this.state.selectedTime\r\n                          ? moment(this.state.selectedTime, \"HH:mm:ss\")\r\n                          : \"\"\r\n                      }\r\n                      className=\"form-control\"\r\n                      size=\"large\"\r\n                      onChange={(time, TimeString) =>\r\n                        this.handleSelectedTimeChanged(TimeString, form)\r\n                      }\r\n                      onBlur={() => form.setFieldTouched(name, true)}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <ErrorMessage name={name} component={TextError} />\r\n              </React.Fragment>\r\n            );\r\n          }}\r\n        </Field>\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CustomDateTimePicker;\r\n","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\CustomButtonGroup.jsx",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\CustomSelect.jsx",["484","485"],"import React from \"react\";\r\nimport { Field } from \"formik\";\r\nimport { FormGroup, Label } from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { useState } from \"react\";\r\n\r\nconst CustomSelect = (props) => {\r\n  const {\r\n    label,\r\n    name,\r\n    options,\r\n    className,\r\n    selectedValue,\r\n    placeholder,\r\n    isMulti,\r\n    ...rest\r\n  } = props;\r\n  // const [temp,setTemp]=useState([])\r\n  // setTimeout(() => {\r\n  //   setTemp(options)\r\n  // }, 5000);\r\n  const classN = className ? className : \"ltr\";\r\n  return (\r\n    <FormGroup>\r\n      {label !== null && label !== \"\" && <Label for={name}>{label}</Label>}\r\n      <Field name={name} as=\"select\">\r\n        {(fieldProps) => {\r\n          const { form, meta } = fieldProps;\r\n          //console.log(\"Render props\", props);\r\n          return (\r\n            <div>\r\n              <Select\r\n                isMulti={isMulti ? true : false}\r\n                className={\r\n                  isMulti\r\n                    ? `basic-single ${classN}`\r\n                    : `basic-multi-select ${classN}`\r\n                }\r\n                classNamePrefix=\"select\"\r\n                defaultValue={selectedValue}\r\n                name={name}\r\n                options={options}\r\n                placeholder={placeholder}\r\n                onChange={(value) => {\r\n                  form.setFieldValue(name, value);\r\n                  if (props.onSelectedChanged) props.onSelectedChanged(value);\r\n                }}\r\n                onBlur={() => form.setFieldTouched(name, true)}\r\n              />\r\n              {meta.touched && meta.error ? (\r\n                <div className=\"error\">{meta.error}</div>\r\n              ) : null}\r\n            </div>\r\n          );\r\n        }}\r\n      </Field>\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nexport default CustomSelect;\r\n","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\CheckboxGroup.jsx",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\RadioButtons.jsx",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\Select.jsx",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\Textarea.jsx",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\Input.jsx",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\InputMaskDebounce.jsx",["486"],"import React, { Component } from \"react\";\r\nimport ReactInputMask from \"react-input-mask\";\r\nimport _ from \"lodash\";\r\nimport { Field } from \"formik\";\r\nimport { FormGroup, Label } from \"reactstrap\";\r\n\r\nclass InputMaskDebounce extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mask: this.props.mask ? this.props.mask : '',\r\n      value: ''\r\n    };\r\n  }\r\n\r\n\r\n  onChange = (event, form) => {\r\n    //console.log('event',event)\r\n    // console.log('props',this.props);\r\n    event.persist();\r\n    const { debounceTime, name, toUppercase } = this.props;\r\n    const defaultDebounceTime = debounceTime && debounceTime != 0 ? debounceTime : 0;\r\n    if (!this.debouncedFn) {\r\n      this.debouncedFn = _.debounce(() => {\r\n        if (event.target) {\r\n          const temp = { ...this.state };\r\n          temp.value = event.target.value;\r\n          this.setState({ mask: temp.mask, value: temp.value });\r\n          if (this.state.mask !== \"\" && this.state.mask.length > 0) {\r\n            if (_(event.target.value).replace(\"_\", \"\").length === this.state.mask.length) {\r\n              // console.log(event.target.value);\r\n              form.setFieldValue(name, toUppercase ? _(temp.value).toUpper() : temp.value);\r\n              if (this.props.onChange)\r\n                this.props.onChange();\r\n            }\r\n            else {\r\n              //form.setFieldValue(name, temp.value);\r\n            }\r\n          } else {\r\n            form.setFieldValue(name, toUppercase ? _(temp.value).toUpper() : temp.value);\r\n            if (this.props.onChange)\r\n              this.props.onChange();\r\n          }\r\n\r\n          //console.log(searchString)\r\n        }\r\n      }, defaultDebounceTime);\r\n    }\r\n    this.debouncedFn();\r\n  };\r\n  render() {\r\n    const { label, name, className, placeholder, defaultValue, type } = this.props;\r\n    const classN = \"form-control \" + className;\r\n    const defaultType = this.props.mask ? 'text' : type ? type : 'text';\r\n    return (\r\n      <FormGroup>\r\n        {label !== null && label !== \"\" && <Label for={name}>{label}</Label>}\r\n        <Field name={name}>\r\n          {(Fieldprops) => {\r\n            const { form, meta } = Fieldprops;\r\n            //console.log(this.state);\r\n            // console.log('mask debounce props', Fieldprops);\r\n            return (\r\n              <React.Fragment>\r\n                <ReactInputMask\r\n                  type={defaultType}\r\n                  mask={this.state.mask}\r\n                  id={name}\r\n                  onBlur={() => form.setFieldTouched(name, true)}\r\n                  onChange={(event) => this.onChange(event, form)}\r\n                  placeholder={placeholder}\r\n                  className={classN}\r\n                  defaultValue={defaultValue}\r\n                />\r\n                {meta.touched && (meta.error) ? (\r\n                  <div className=\"error\">{meta.error}</div>\r\n                ) : null}\r\n              </React.Fragment>\r\n            );\r\n          }}\r\n        </Field>\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputMaskDebounce;\r\n","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\todo\\todoData.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\utility\\context\\toggleContentContext.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\components\\footer\\footer.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\components\\navbar\\navbar.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\components\\sidebar\\sidebar.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\common\\formik\\TextError.jsx",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\redux\\customizer\\customizerActions.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\customizer\\customizer.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\components\\sidebar\\sidemenu\\sidemenu.js",["487","488","489","490","491","492"],"// import external modules\r\nimport React, { Component } from \"react\";\r\n\r\nimport { ChevronRight } from \"react-feather\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n// Styling\r\nimport \"../../../../assets/scss/components/sidebar/sidemenu/sidemenu.scss\";\r\n// import internal(own) modules\r\nimport SideMenu from \"../sidemenuHelper\";\r\nimport ReactRevealText from \"react-reveal-text\";\r\nimport * as auth from \"../../../../services/authService\";\r\nimport config from '../../../../config.json';\r\nimport menuList from '../../../../mockData/menuList';\r\nimport _ from 'lodash';\r\n\r\nclass SideMenuContent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: {},\r\n      showUserInfo: false,\r\n      menuList: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.setState({ showUserInfo: true });\r\n    }, 1500);\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (!config.useAuthentication) {\r\n      this.setState({ menuList: menuList });\r\n    }\r\n    else {\r\n      const user = auth.getCurrentUser();\r\n      if (user.userType === \"Admin\") {\r\n        this.setState({ menuList: menuList, user: user });\r\n        return;\r\n      }\r\n      else {\r\n\r\n        function filterData(data, key) {\r\n          var r = data.filter(function (o) {\r\n            if (o.child) o.child = filterData(o.child, key);\r\n            return o.key != key;\r\n          });\r\n          return r;\r\n        }\r\n\r\n        let userDoesNotHavePermissions = user.permissions\r\n          .filter((m) => m.isGranted == false)\r\n          .map((n) => n.name);\r\n\r\n        console.log('side menu userDoesNotHavePermissions', userDoesNotHavePermissions)\r\n        let result = menuList;\r\n        userDoesNotHavePermissions.forEach((p) => {\r\n          result = filterData(result, p);\r\n        });\r\n\r\n        this.setState({ menuList: result, user: user });\r\n      }\r\n    }\r\n  }\r\n  showMenus = () => {\r\n    let menu = _.cloneDeep(this.state.menuList);\r\n    // console.log(menu);\r\n\r\n    let travers = tree => {\r\n\r\n      return tree.map(item => {\r\n        if (item.child.length == 0) {\r\n          if (item.url && item.url !== \"\") {\r\n            return (\r\n              <NavLink to={item.url} key={item.key} exact className=\"item\" activeclassname=\"active\">\r\n                {item.icon &&\r\n                  <i className=\"menu-icon\">\r\n                    {item.icon()}\r\n                  </i>}\r\n                <span className=\"menu-item-text\">{item.name}</span>\r\n              </NavLink>\r\n            )\r\n          }\r\n          else {\r\n            return (\r\n              <React.Fragment key={item.key}>\r\n                <div hidden={true}></div>\r\n              </React.Fragment>\r\n            )\r\n          }\r\n          //return null\r\n        }\r\n        else {\r\n          return (\r\n            <SideMenu toggleSidebarMenu={this.props.toggleSidebarMenu} key={item.key}>\r\n              <SideMenu.MenuMultiItems\r\n                key={item.key}\r\n                name={item.name}\r\n                Icon={item.icon ? item.icon() : ''}\r\n                ArrowRight={<ChevronRight size={16} />}\r\n                collapsedSidebar={this.props.collapsedSidebar}\r\n              >\r\n                {travers(item.child)}\r\n              </SideMenu.MenuMultiItems>\r\n            </SideMenu>\r\n          )\r\n        }\r\n      })\r\n    }\r\n\r\n    return menu.map(item => {\r\n      if (item.child.length == 0) {\r\n        //console.log(item)\r\n        return (\r\n          <SideMenu.MenuSingleItem badgeColor=\"danger\" key={item.key} >\r\n            <NavLink to={item.url} activeclassname=\"active\">\r\n              <i className=\"menu-icon\">\r\n                {item.icon && item.icon()}\r\n              </i>\r\n              <span className=\"menu-item-text\">{item.name}</span>\r\n            </NavLink>\r\n          </SideMenu.MenuSingleItem>)\r\n      }\r\n      else {\r\n        // console.log('node - child > 0', item.child)\r\n        return (\r\n          <SideMenu.MenuMultiItems\r\n            key={item.key}\r\n            name={item.name}\r\n            Icon={item.icon ? item.icon() : ''}\r\n            ArrowRight={<ChevronRight size={16} />}\r\n            collapsedSidebar={this.props.collapsedSidebar}\r\n          >\r\n            {travers(item.child)}\r\n          </SideMenu.MenuMultiItems>\r\n\r\n        )\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <SideMenu\r\n        className=\"sidebar-content\"\r\n        toggleSidebarMenu={this.props.toggleSidebarMenu}\r\n      >\r\n        <SideMenu.MenuSingleItem badgeColor=\"danger\">\r\n          <ReactRevealText\r\n            style={{ color: \"White\", fontSize: 18 }}\r\n            className=\"m-3\"\r\n            show={this.state.showUserInfo}\r\n            text={\"Welcome \" + this.state.user.firstName}\r\n          ></ReactRevealText>\r\n        </SideMenu.MenuSingleItem>\r\n\r\n        {\r\n          this.state.menuList && this.showMenus(this.state.menuList)\r\n        }\r\n\r\n        //#region  Old Structure\r\n        {/* <SideMenu.MenuSingleItem badgeColor=\"danger\">\r\n          <NavLink to={urls.Home} activeclassname=\"active\">\r\n            <i className=\"menu-icon\">\r\n              <Home size={18} />\r\n            </i>\r\n            <span className=\"menu-item-text\">Home</span>\r\n          </NavLink>\r\n        </SideMenu.MenuSingleItem> */}\r\n\r\n        {/* <SideMenu.MenuMultiItems\r\n          name=\"Basic Information\"\r\n          Icon={<FileText size={18} />}\r\n          ArrowRight={<ChevronRight size={16} />}\r\n          collapsedSidebar={this.props.collapsedSidebar}\r\n        >\r\n          <NavLink to={urls.BasicInfo.Vessels} exact className=\"item\" activeclassname=\"active\">\r\n            <span className=\"menu-item-text\">Vessels</span>\r\n          </NavLink>\r\n          <NavLink to={urls.BasicInfo.ShippingLines} exact className=\"item\" activeclassname=\"active\">\r\n            <span className=\"menu-item-text\">Shipping Lines</span>\r\n          </NavLink>\r\n          <NavLink to={urls.BasicInfo.Voyages} exact className=\"item\" activeclassname=\"active\">\r\n            <span className=\"menu-item-text\">Voyages</span>\r\n          </NavLink>\r\n          <NavLink to={urls.BasicInfo.Countries} exact className=\"item\" activeclassname=\"active\">\r\n            <span className=\"menu-item-text\">Countries</span>\r\n          </NavLink>\r\n        </SideMenu.MenuMultiItems> */}\r\n\r\n        {/* <SideMenu.MenuMultiItems\r\n          name=\"Garbage collection bill\"\r\n          Icon={<Paperclip size={18} />}\r\n          ArrowRight={<ChevronRight size={16} />}\r\n          collapsedSidebar={this.props.collapsedSidebar}\r\n        >\r\n          <NavLink\r\n            to={urls.billing.garbageCollection.invoice}\r\n            exact\r\n            className=\"item\"\r\n            activeclassname=\"active\"\r\n          >\r\n            <span className=\"menu-item-text\">Invoice</span>\r\n          </NavLink>\r\n          <NavLink \r\n            to={urls.billing.garbageCollection.list}\r\n            exact\r\n            className=\"item\"\r\n            activeclassname=\"active\"\r\n          >\r\n            <span className=\"menu-item-text\">List</span>\r\n          </NavLink>\r\n          <NavLink\r\n            to={urls.billing.garbageCollection.tariff}\r\n            exact\r\n            className=\"item\"\r\n            activeclassname=\"active\"\r\n          >\r\n            <span className=\"menu-item-text\">Tariff</span>\r\n          </NavLink>\r\n        </SideMenu.MenuMultiItems> */}\r\n      //#endregion \r\n\r\n      </SideMenu >\r\n    );\r\n  }\r\n}\r\n\r\nexport default SideMenuContent;\r\n","D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\components\\sidebar\\sidebarHeader\\sidebarHeader.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\layouts\\components\\sidebar\\sidemenuHelper.js",[],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\mockData\\menuList.jsx",[],["493","494"],"D:\\Amini\\Project\\NeginProject\\JafarProject\\client\\src\\components\\search\\Search.js",[],{"ruleId":"495","replacedBy":"496"},{"ruleId":"497","replacedBy":"498"},{"ruleId":"499","severity":1,"message":"500","line":9,"column":10,"nodeType":"501","messageId":"502","endLine":9,"endColumn":23},{"ruleId":"499","severity":1,"message":"503","line":3,"column":33,"nodeType":"501","messageId":"502","endLine":3,"endColumn":41},{"ruleId":"499","severity":1,"message":"504","line":1,"column":17,"nodeType":"501","messageId":"502","endLine":1,"endColumn":26},{"ruleId":"499","severity":1,"message":"505","line":2,"column":10,"nodeType":"501","messageId":"502","endLine":2,"endColumn":15},{"ruleId":"499","severity":1,"message":"506","line":2,"column":17,"nodeType":"501","messageId":"502","endLine":2,"endColumn":26},{"ruleId":"499","severity":1,"message":"507","line":9,"column":8,"nodeType":"501","messageId":"502","endLine":9,"endColumn":12},{"ruleId":"499","severity":1,"message":"508","line":12,"column":10,"nodeType":"501","messageId":"502","endLine":12,"endColumn":18},{"ruleId":"499","severity":1,"message":"509","line":67,"column":10,"nodeType":"501","messageId":"502","endLine":67,"endColumn":15},{"ruleId":"499","severity":1,"message":"510","line":67,"column":17,"nodeType":"501","messageId":"502","endLine":67,"endColumn":25},{"ruleId":"499","severity":1,"message":"511","line":71,"column":10,"nodeType":"501","messageId":"502","endLine":71,"endColumn":29},{"ruleId":"499","severity":1,"message":"512","line":71,"column":31,"nodeType":"501","messageId":"502","endLine":71,"endColumn":53},{"ruleId":"513","severity":1,"message":"514","line":91,"column":6,"nodeType":"515","endLine":91,"endColumn":8,"suggestions":"516"},{"ruleId":"499","severity":1,"message":"517","line":94,"column":9,"nodeType":"501","messageId":"502","endLine":94,"endColumn":21},{"ruleId":"499","severity":1,"message":"518","line":5,"column":29,"nodeType":"501","messageId":"502","endLine":5,"endColumn":37},{"ruleId":"499","severity":1,"message":"519","line":11,"column":13,"nodeType":"501","messageId":"502","endLine":11,"endColumn":20},{"ruleId":"520","severity":1,"message":"521","line":174,"column":39,"nodeType":"522","messageId":"523","endLine":174,"endColumn":41},{"ruleId":"520","severity":1,"message":"521","line":229,"column":34,"nodeType":"522","messageId":"523","endLine":229,"endColumn":36},{"ruleId":"520","severity":1,"message":"521","line":274,"column":39,"nodeType":"522","messageId":"523","endLine":274,"endColumn":41},{"ruleId":"520","severity":1,"message":"521","line":285,"column":30,"nodeType":"522","messageId":"523","endLine":285,"endColumn":32},{"ruleId":"520","severity":1,"message":"521","line":321,"column":34,"nodeType":"522","messageId":"523","endLine":321,"endColumn":36},{"ruleId":"524","severity":1,"message":"525","line":418,"column":50,"nodeType":"526","messageId":"527","endLine":418,"endColumn":52},{"ruleId":"499","severity":1,"message":"528","line":3,"column":17,"nodeType":"501","messageId":"502","endLine":3,"endColumn":20},{"ruleId":"499","severity":1,"message":"529","line":20,"column":10,"nodeType":"501","messageId":"502","endLine":20,"endColumn":22},{"ruleId":"499","severity":1,"message":"530","line":89,"column":23,"nodeType":"501","messageId":"502","endLine":89,"endColumn":39},{"ruleId":"499","severity":1,"message":"531","line":5,"column":8,"nodeType":"501","messageId":"502","endLine":5,"endColumn":9},{"ruleId":"499","severity":1,"message":"532","line":13,"column":24,"nodeType":"501","messageId":"502","endLine":13,"endColumn":30},{"ruleId":"499","severity":1,"message":"533","line":14,"column":10,"nodeType":"501","messageId":"502","endLine":14,"endColumn":23},{"ruleId":"499","severity":1,"message":"534","line":14,"column":25,"nodeType":"501","messageId":"502","endLine":14,"endColumn":38},{"ruleId":"499","severity":1,"message":"535","line":19,"column":13,"nodeType":"501","messageId":"502","endLine":19,"endColumn":19},{"ruleId":"499","severity":1,"message":"536","line":23,"column":8,"nodeType":"501","messageId":"502","endLine":23,"endColumn":14},{"ruleId":"499","severity":1,"message":"537","line":279,"column":10,"nodeType":"501","messageId":"502","endLine":279,"endColumn":27},{"ruleId":"499","severity":1,"message":"538","line":279,"column":29,"nodeType":"501","messageId":"502","endLine":279,"endColumn":49},{"ruleId":"499","severity":1,"message":"539","line":461,"column":9,"nodeType":"501","messageId":"502","endLine":461,"endColumn":36},{"ruleId":"499","severity":1,"message":"540","line":464,"column":9,"nodeType":"501","messageId":"502","endLine":464,"endColumn":35},{"ruleId":"499","severity":1,"message":"541","line":465,"column":9,"nodeType":"501","messageId":"502","endLine":465,"endColumn":35},{"ruleId":"499","severity":1,"message":"542","line":466,"column":9,"nodeType":"501","messageId":"502","endLine":466,"endColumn":42},{"ruleId":"499","severity":1,"message":"543","line":467,"column":9,"nodeType":"501","messageId":"502","endLine":467,"endColumn":40},{"ruleId":"499","severity":1,"message":"544","line":468,"column":9,"nodeType":"501","messageId":"502","endLine":468,"endColumn":38},{"ruleId":"499","severity":1,"message":"545","line":13,"column":10,"nodeType":"501","messageId":"502","endLine":13,"endColumn":22},{"ruleId":"499","severity":1,"message":"546","line":16,"column":8,"nodeType":"501","messageId":"502","endLine":16,"endColumn":17},{"ruleId":"499","severity":1,"message":"547","line":17,"column":8,"nodeType":"501","messageId":"502","endLine":17,"endColumn":18},{"ruleId":"499","severity":1,"message":"548","line":18,"column":8,"nodeType":"501","messageId":"502","endLine":18,"endColumn":13},{"ruleId":"499","severity":1,"message":"548","line":10,"column":8,"nodeType":"501","messageId":"502","endLine":10,"endColumn":13},{"ruleId":"499","severity":1,"message":"549","line":13,"column":8,"nodeType":"501","messageId":"502","endLine":13,"endColumn":11},{"ruleId":"499","severity":1,"message":"550","line":14,"column":10,"nodeType":"501","messageId":"502","endLine":14,"endColumn":19},{"ruleId":"524","severity":1,"message":"525","line":121,"column":109,"nodeType":"526","messageId":"527","endLine":121,"endColumn":111},{"ruleId":"524","severity":1,"message":"525","line":164,"column":77,"nodeType":"526","messageId":"527","endLine":164,"endColumn":79},{"ruleId":"524","severity":1,"message":"525","line":165,"column":77,"nodeType":"526","messageId":"527","endLine":165,"endColumn":79},{"ruleId":"499","severity":1,"message":"548","line":9,"column":8,"nodeType":"501","messageId":"502","endLine":9,"endColumn":13},{"ruleId":"524","severity":1,"message":"525","line":115,"column":109,"nodeType":"526","messageId":"527","endLine":115,"endColumn":111},{"ruleId":"524","severity":1,"message":"525","line":158,"column":77,"nodeType":"526","messageId":"527","endLine":158,"endColumn":79},{"ruleId":"524","severity":1,"message":"525","line":159,"column":77,"nodeType":"526","messageId":"527","endLine":159,"endColumn":79},{"ruleId":"551","severity":1,"message":"552","line":57,"column":9,"nodeType":"553","messageId":"554","endLine":64,"endColumn":10},{"ruleId":"524","severity":1,"message":"525","line":109,"column":67,"nodeType":"526","messageId":"527","endLine":109,"endColumn":69},{"ruleId":"499","severity":1,"message":"546","line":15,"column":8,"nodeType":"501","messageId":"502","endLine":15,"endColumn":17},{"ruleId":"499","severity":1,"message":"547","line":16,"column":8,"nodeType":"501","messageId":"502","endLine":16,"endColumn":18},{"ruleId":"499","severity":1,"message":"548","line":17,"column":8,"nodeType":"501","messageId":"502","endLine":17,"endColumn":13},{"ruleId":"524","severity":1,"message":"525","line":113,"column":67,"nodeType":"526","messageId":"527","endLine":113,"endColumn":69},{"ruleId":"499","severity":1,"message":"555","line":3,"column":8,"nodeType":"501","messageId":"502","endLine":3,"endColumn":17},{"ruleId":"499","severity":1,"message":"548","line":4,"column":8,"nodeType":"501","messageId":"502","endLine":4,"endColumn":13},{"ruleId":"499","severity":1,"message":"556","line":6,"column":10,"nodeType":"501","messageId":"502","endLine":6,"endColumn":16},{"ruleId":"557","severity":1,"message":"558","line":19,"column":29,"nodeType":"559","endLine":19,"endColumn":45},{"ruleId":"560","severity":1,"message":"561","line":55,"column":1,"nodeType":"562","endLine":60,"endColumn":3},{"ruleId":"499","severity":1,"message":"504","line":1,"column":17,"nodeType":"501","messageId":"502","endLine":1,"endColumn":26},{"ruleId":"551","severity":1,"message":"552","line":36,"column":5,"nodeType":"553","messageId":"554","endLine":50,"endColumn":6},{"ruleId":"560","severity":1,"message":"561","line":61,"column":1,"nodeType":"562","endLine":67,"endColumn":3},{"ruleId":"499","severity":1,"message":"563","line":2,"column":10,"nodeType":"501","messageId":"502","endLine":2,"endColumn":22},{"ruleId":"499","severity":1,"message":"564","line":3,"column":8,"nodeType":"501","messageId":"502","endLine":3,"endColumn":17},{"ruleId":"499","severity":1,"message":"565","line":4,"column":21,"nodeType":"501","messageId":"502","endLine":4,"endColumn":24},{"ruleId":"499","severity":1,"message":"546","line":6,"column":8,"nodeType":"501","messageId":"502","endLine":6,"endColumn":17},{"ruleId":"499","severity":1,"message":"547","line":7,"column":8,"nodeType":"501","messageId":"502","endLine":7,"endColumn":18},{"ruleId":"499","severity":1,"message":"556","line":2,"column":10,"nodeType":"501","messageId":"502","endLine":2,"endColumn":16},{"ruleId":"499","severity":1,"message":"566","line":2,"column":18,"nodeType":"501","messageId":"502","endLine":2,"endColumn":29},{"ruleId":"499","severity":1,"message":"531","line":4,"column":8,"nodeType":"501","messageId":"502","endLine":4,"endColumn":9},{"ruleId":"499","severity":1,"message":"567","line":5,"column":22,"nodeType":"501","messageId":"502","endLine":5,"endColumn":27},{"ruleId":"499","severity":1,"message":"568","line":6,"column":8,"nodeType":"501","messageId":"502","endLine":6,"endColumn":25},{"ruleId":"499","severity":1,"message":"569","line":101,"column":27,"nodeType":"501","messageId":"502","endLine":101,"endColumn":31},{"ruleId":"570","severity":1,"message":"571","line":122,"column":23,"nodeType":"572","endLine":122,"endColumn":46},{"ruleId":"499","severity":1,"message":"573","line":5,"column":10,"nodeType":"501","messageId":"502","endLine":5,"endColumn":18},{"ruleId":"499","severity":1,"message":"574","line":16,"column":8,"nodeType":"501","messageId":"502","endLine":16,"endColumn":12},{"ruleId":"524","severity":1,"message":"575","line":22,"column":62,"nodeType":"526","messageId":"527","endLine":22,"endColumn":64},{"ruleId":"524","severity":1,"message":"575","line":48,"column":26,"nodeType":"526","messageId":"527","endLine":48,"endColumn":28},{"ruleId":"524","severity":1,"message":"525","line":54,"column":38,"nodeType":"526","messageId":"527","endLine":54,"endColumn":40},{"ruleId":"524","severity":1,"message":"525","line":74,"column":31,"nodeType":"526","messageId":"527","endLine":74,"endColumn":33},{"ruleId":"524","severity":1,"message":"525","line":114,"column":29,"nodeType":"526","messageId":"527","endLine":114,"endColumn":31},{"ruleId":"576","severity":1,"message":"577","line":162,"column":10,"nodeType":"578","endLine":165,"endColumn":9},{"ruleId":"576","severity":1,"message":"577","line":224,"column":39,"nodeType":"578","endLine":227,"endColumn":7},{"ruleId":"495","replacedBy":"579"},{"ruleId":"497","replacedBy":"580"},"no-native-reassign",["581"],"no-negated-in-lhs",["582"],"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'Component' is defined but never used.","'Slide' is defined but never used.","'useEffect' is defined but never used.","'urls' is defined but never used.","'getAreas' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'disableSubmitButton' is assigned a value but never used.","'setDisableSubmitButton' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.state'. Either include it or remove the dependency array.","ArrayExpression",["583"],"'errorMessage' is assigned a value but never used.","'Checkbox' is defined but never used.","'forEach' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Tag' is defined but never used.","'getCountries' is defined but never used.","'lstShippingLines' is assigned a value but never used.","'_' is defined but never used.","'Switch' is defined but never used.","'CloseOutlined' is defined but never used.","'CheckOutlined' is defined but never used.","'isDate' is defined but never used.","'moment' is defined but never used.","'validVoyageStatus' is assigned a value but never used.","'setValidVoyageStatus' is assigned a value but never used.","'handleVesselSelectedChanged' is assigned a value but never used.","'handleOwnerSelectedChanged' is assigned a value but never used.","'handleAgentSelectedChanged' is assigned a value but never used.","'handlePreviousPortSelectedChanged' is assigned a value but never used.","'handleOriginPortSelectedChanged' is assigned a value but never used.","'handleNextPortSelectedChanged' is assigned a value but never used.","'FormatNumber' is defined but never used.","'antdClass' is defined but never used.","'antdClass2' is defined but never used.","'style' is defined but never used.","'url' is defined but never used.","'propTypes' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'bootstrap' is defined but never used.","'Button' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'ErrorMessage' is defined but never used.","'TextError' is defined but never used.","'Row' is defined but never used.","'ButtonGroup' is defined but never used.","'utils' is defined but never used.","'InputMaskDebounce' is defined but never used.","'meta' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useState' is defined but never used.","'rest' is assigned a value but never used.","Expected '!==' and instead saw '!='.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText",["581"],["582"],"no-global-assign","no-unsafe-negation",{"desc":"584","fix":"585"},"Update the dependencies array to be: [props.location.state]",{"range":"586","text":"587"},[2788,2790],"[props.location.state]"]
